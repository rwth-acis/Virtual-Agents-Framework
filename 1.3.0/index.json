{
  "api/i5.VirtualAgents.AdaptiveGaze.html": {
    "href": "api/i5.VirtualAgents.AdaptiveGaze.html",
    "title": "Class AdaptiveGaze | Documentation of the Virtual Agents Framework",
    "keywords": "Class AdaptiveGaze Defines a gaze behaviour that looks at gaze targets in the scene dynamically Inheritance object AdaptiveGaze Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class AdaptiveGaze : MonoBehaviour Fields occlusionLayers The layers that can block the view between a gaze target and the agent The default is the default layer mask Declaration public LayerMask occlusionLayers Field Value Type Description LayerMask OverwriteGazeTarget When this transform is set, the gaze target is overwritten and the agent looks at this transform constantly without interruption (within the boundaries specified by the AimAt Script, e.g. distanceLimit and angleLimit) Declaration public Transform OverwriteGazeTarget Field Value Type Description Transform seeLayers The object layers that are checked for gaze targets, default is everything for the sake of simplicity. It is recommended to set this to a more specific layer mask to improve performance. Declaration public LayerMask seeLayers Field Value Type Description LayerMask Methods Activate() This function has to be called to start the adaptive gaze, after has been stopped with the deactivate function Declaration public void Activate() Deactivate() This function has to be called to stop the adaptive gaze Declaration public void Deactivate()"
  },
  "api/i5.VirtualAgents.AdaptiveGazeTarget.html": {
    "href": "api/i5.VirtualAgents.AdaptiveGazeTarget.html",
    "title": "Class AdaptiveGazeTarget | Documentation of the Virtual Agents Framework",
    "keywords": "Class AdaptiveGazeTarget Inheritance object AdaptiveGazeTarget Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class AdaptiveGazeTarget : MonoBehaviour Fields canCurrentlyBeLookedAt Can be used to switch the object's perceivability off. This is de/activated by the item component, when the item is dropped/picked up. Declaration public bool canCurrentlyBeLookedAt Field Value Type Description bool importance The importance of the item for the agent. The higher the value, the more liekly it is the agent to look at it. Increases during runtime resets novelty for the agent Declaration public float importance Field Value Type Description float"
  },
  "api/i5.VirtualAgents.Agent.html": {
    "href": "api/i5.VirtualAgents.Agent.html",
    "title": "Class Agent | Documentation of the Virtual Agents Framework",
    "keywords": "Class Agent Agent's functionality mainly includes managing their task queue, responding to task execution statuses and changing one's state accordingly Inheritance object Agent Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class Agent : MonoBehaviour Properties Animator The animator component which controls the agent's animations Declaration public Animator Animator { get; } Property Value Type Description Animator TaskSystem The task system which manages the tasks of the agent Declaration public ITaskSystem TaskSystem { get; } Property Value Type Description ITaskSystem"
  },
  "api/i5.VirtualAgents.AgentAnimationUpdater.html": {
    "href": "api/i5.VirtualAgents.AgentAnimationUpdater.html",
    "title": "Class AgentAnimationUpdater | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAnimationUpdater Component for synchronizing the agent's movement with the shown animation Inheritance object AgentAnimationUpdater Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class AgentAnimationUpdater : MonoBehaviour"
  },
  "api/i5.VirtualAgents.AgentImportMenu.html": {
    "href": "api/i5.VirtualAgents.AgentImportMenu.html",
    "title": "Class AgentImportMenu | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentImportMenu This script provides a menu item to create an agent from a humanoid model Inheritance object AgentImportMenu Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class AgentImportMenu : EditorWindow Methods TurnAvatarIntoAgent() Declaration public static void TurnAvatarIntoAgent()"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentAdaptiveGazeTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentAdaptiveGazeTask.html",
    "title": "Class AgentAdaptiveGazeTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAdaptiveGazeTask Starts or stops adaptive gaze on the agent and marks the task as completed afterwards. Inheritance object BaseTask AgentBaseTask AgentAdaptiveGazeTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) AgentBaseTask.Abort() BaseTask.State BaseTask.OnTaskStarted BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentAdaptiveGazeTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentAdaptiveGazeTask() Constructor for the adaptive gaze task Declaration public AgentAdaptiveGazeTask() AgentAdaptiveGazeTask(bool) Constructor for the adaptive gaze task Declaration public AgentAdaptiveGazeTask(bool shouldStartOrStop) Parameters Type Name Description bool shouldStartOrStop If true, will start adaptive Gaze. If false will stop adaptive gaze Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the execution of the task; starts or stops the adaptive gaze Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent on which the task is executed Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentAnimationTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentAnimationTask.html",
    "title": "Class AgentAnimationTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAnimationTask Starts an animation by setting the trigger in the animator belonging to the agent. It will stop it after playtime second using the stop trigger if provided or else the startTrigger again Inheritance object BaseTask AgentBaseTask AgentAnimationTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) BaseTask.State BaseTask.OnTaskStarted BaseTask.EvaluateTaskState() BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentAnimationTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentAnimationTask() Declaration public AgentAnimationTask() AgentAnimationTask(string, float, string, string, GameObject) Declaration public AgentAnimationTask(string startTrigger, float playTime, string stopTrigger = \"\", string layer = \"\", GameObject aimTarget = null) Parameters Type Name Description string startTrigger float playTime string stopTrigger string layer GameObject aimTarget Methods Abort() Aborts the animation task and sets its state to aborted Declaration public override void Abort() Overrides AgentBaseTask.Abort() Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the execution of the task; starts the animation Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent on which the task is executed Overrides BaseTask.StartExecution(Agent) StopExecution() Stops the animation Declaration public override void StopExecution() Overrides BaseTask.StopExecution() Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentAudioTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentAudioTask.html",
    "title": "Class AgentAudioTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAudioTask Inheritance object BaseTask AgentBaseTask AgentAudioTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) AgentBaseTask.Abort() BaseTask.State BaseTask.OnTaskStarted BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentAudioTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentAudioTask(AudioClip, int) Creates a new audio task Declaration public AgentAudioTask(AudioClip audio, int priority = 0) Parameters Type Name Description AudioClip audio The audio to be played int priority Fields AgentAudioSource The audio source which plays the audio Declaration public AudioSource AgentAudioSource Field Value Type Description AudioSource Audio The audio to be played Declaration public AudioClip Audio Field Value Type Description AudioClip Methods ContinueAudio() Method to continue the audio Declaration public void ContinueAudio() Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer EvaluateTaskState() Declaration public override TaskState EvaluateTaskState() Returns Type Description TaskState Overrides BaseTask.EvaluateTaskState() PauseAudio() Method to pause the audio Declaration public void PauseAudio() Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the audio task Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the movement task Overrides BaseTask.StartExecution(Agent) StopExecution() Finish the task Declaration public override void StopExecution() Overrides BaseTask.StopExecution() Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentBaseTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentBaseTask.html",
    "title": "Class AgentBaseTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentBaseTask Base class which provides default implementations for the interface methods Using this class avoids repeatedly implementing empty interface classes if they are not needed Inheritance object BaseTask AgentBaseTask AgentAdaptiveGazeTask AgentAnimationTask AgentAudioTask AgentDropTask AgentMovementTask AgentPickUpTask AgentRotationTask AgentSittingTask AgentWaitTask Implements IAgentTask ITask Inherited Members BaseTask.State BaseTask.OnTaskStarted BaseTask.EvaluateTaskState() BaseTask.StartExecution(Agent) BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public abstract class AgentBaseTask : BaseTask, IAgentTask, ITask Constructors AgentBaseTask() Creates a new task Declaration public AgentBaseTask() Properties CanStart Indicates whether this task is ready to start execution Checks whether all depending tasks are finished Can be overridden to add custom conditions in child classes Declaration public virtual bool CanStart { get; } Property Value Type Description bool DependsOnTasks List of tasks which need to finish first in order for this task to start Declaration public List<IAgentTask> DependsOnTasks { get; protected set; } Property Value Type Description System.Collections.Generic.List<T><IAgentTask> IsFinished Indicates whether the task is finished Declaration public bool IsFinished { get; protected set; } Property Value Type Description bool Methods Abort() Aborts the task and sets its state to aborted Declaration public virtual void Abort() FinishTask() Declaration public virtual void FinishTask() FinishTaskAsFailed() Declaration public virtual void FinishTaskAsFailed() WaitFor(params AgentBaseTask[]) Indicates that the task has to wait for at least one oter task to finish first Adds the tasks to the list of dependencies Declaration public void WaitFor(params AgentBaseTask[] otherTasks) Parameters Type Name Description AgentBaseTask[] otherTasks The other tasks which have to finish before this task can start Events OnTaskFinished Event which is raised when this task has finished Declaration public event Action OnTaskFinished Event Type Type Description Action Implements IAgentTask ITask"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentDropTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentDropTask.html",
    "title": "Class AgentDropTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentDropTask Defines pick up tasks for picking up objects that are near to the agent Uses the NavMeshAgent component Inheritance object BaseTask AgentBaseTask AgentDropTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) AgentBaseTask.Abort() BaseTask.State BaseTask.OnTaskStarted BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentDropTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentDropTask() Declaration public AgentDropTask() AgentDropTask(GameObject) Create an AgentDropTask using the object that is currently carried and should be dropped, if no object is given, the agent will drop all objects that are currently carried Declaration public AgentDropTask(GameObject dropObject = null) Parameters Type Name Description GameObject dropObject The object that the agent should drop Properties DropObject Object that should be picked up Declaration public GameObject DropObject { get; } Property Value Type Description GameObject Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the drop task Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the drop task Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentMovementTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentMovementTask.html",
    "title": "Class AgentMovementTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentMovementTask Defines movement tasks for walking and running Uses the NavMeshAgent component Inheritance object BaseTask AgentBaseTask AgentMovementTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) BaseTask.State BaseTask.OnTaskStarted BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentMovementTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentMovementTask() Declaration public AgentMovementTask() AgentMovementTask(GameObject, float, bool) Create an AgentMovementTask using a destination object Declaration public AgentMovementTask(GameObject destinationObject, float targetSpeed = -1, bool followGameObject = false) Parameters Type Name Description GameObject destinationObject The object that the agent should move to or follow float targetSpeed The target speed of the agent, e.g. to set running or walking; if not set, the default value in the NavMeshAgent is taken bool followGameObject Determines if the agent should follow the DestinationObject automatically, even when path is noncomplete AgentMovementTask(Vector3, float) Create an AgentMovementTask using destination coordinates Declaration public AgentMovementTask(Vector3 destinationCoordinates, float targetSpeed = -1) Parameters Type Name Description Vector3 destinationCoordinates The position to which the agent should move float targetSpeed The target speed of the agent, e.g. to set running or walking; if not set, the default value in the NavMeshAgent is taken Fields navMeshAgent Reference to the NavMeshAgent component Declaration protected NavMeshAgent navMeshAgent Field Value Type Description NavMeshAgent Properties Destination Destination coordinates of the movement task Declaration public Vector3 Destination { get; protected set; } Property Value Type Description Vector3 DestinationObject Destination Object of the movement task Declaration public GameObject DestinationObject { get; protected set; } Property Value Type Description GameObject MinDistance Minimum distance of the agent to the target so that the task is considered finished Declaration public float MinDistance { get; set; } Property Value Type Description float PathUpdateInterval Number of seconds after which the path will be recalculated Declaration public float PathUpdateInterval { get; set; } Property Value Type Description float TargetSpeed The target movement speed of the agent If negative, the default value set in the NavMeshAgent is taken Declaration public float TargetSpeed { get; protected set; } Property Value Type Description float Methods Abort() Aborts the movement task and sets its state to aborted Declaration public override void Abort() Overrides AgentBaseTask.Abort() Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer EvaluateTaskState() Checks every frame whether the agent has reached the target Declaration public override TaskState EvaluateTaskState() Returns Type Description TaskState Overrides BaseTask.EvaluateTaskState() Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the movement task Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the movement task Overrides BaseTask.StartExecution(Agent) StopExecution() Finish the task Declaration public override void StopExecution() Overrides BaseTask.StopExecution() Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentPickUpTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentPickUpTask.html",
    "title": "Class AgentPickUpTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentPickUpTask Defines pick up tasks for picking up objects that are near to the agent Uses the NavMeshAgent component Inheritance object BaseTask AgentBaseTask AgentPickUpTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) AgentBaseTask.Abort() BaseTask.State BaseTask.OnTaskStarted BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentPickUpTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentPickUpTask() Declaration public AgentPickUpTask() AgentPickUpTask(GameObject, SocketId) Create an AgentPickUpTask using the object that should be picked up Declaration public AgentPickUpTask(GameObject pickupObject, SocketId socketId = null) Parameters Type Name Description GameObject pickupObject The object that the agent should pick up SocketId socketId Agent socket that the object should be attached to, standard is the right Hand Properties PickupObject Object that should be picked up Declaration public GameObject PickupObject { get; protected set; } Property Value Type Description GameObject SocketId Agents socket that the object should attached to Declaration public SocketId SocketId { get; protected set; } Property Value Type Description SocketId Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer IKWeightIncrease(Agent, Item) Declaration public IEnumerator IKWeightIncrease(Agent agent, Item item) Parameters Type Name Description Agent agent Item item Returns Type Description System.Collections.IEnumerator PickUpObject(Agent, Item) Declaration public void PickUpObject(Agent agent, Item item) Parameters Type Name Description Agent agent Item item Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the pickUp task Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the pickUP task Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentRotationTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentRotationTask.html",
    "title": "Class AgentRotationTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentRotationTask Defines rotation tasks for rotating the agent to a specific direction. The direction can be given as a target, coordinates or angle. Inheritance object BaseTask AgentBaseTask AgentRotationTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) AgentBaseTask.Abort() BaseTask.State BaseTask.OnTaskStarted BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentRotationTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentRotationTask(GameObject, float) Create an AgentRotationTask using a target object to turn towards Declaration public AgentRotationTask(GameObject target, float speed = 10) Parameters Type Name Description GameObject target Target object of the rotation task float speed AgentRotationTask(float, bool, float) Create an AgentRotationTask using the angle that the agent should rotate by. Positive angle turns right, negative angle turns left. When isRotationByAngle is set to false, the agents rotation attribute will be set to the angle specified instead. In this case the agent rotates in the direction that minimises the distance. Declaration public AgentRotationTask(float angle, bool isRotationByAngle = true, float speed = 10) Parameters Type Name Description float angle The angle to rotate by or towards, in degrees bool isRotationByAngle True if agent should rotate by \"angle\" degrees, false if the rotation value of the agent should be set to \"angle\" float speed AgentRotationTask(Vector3, float) Create an AgentRotationTask using the destination coordinates Declaration public AgentRotationTask(Vector3 coordinates, float speed = 10) Parameters Type Name Description Vector3 coordinates Coordinates of the rotation task float speed Properties Angle The angle the agent should rotate by or towards Declaration public float Angle { get; protected set; } Property Value Type Description float IsRotationByAngle Used to determine if the agent should rotate by a specific angle or towards a specific angle. Declaration public bool IsRotationByAngle { get; protected set; } Property Value Type Description bool Speed The speed at which the agent should rotate Declaration public float Speed { get; protected set; } Property Value Type Description float TargetRotation The rotation as a quaternion which the agent should rotate to Declaration public Quaternion TargetRotation { get; protected set; } Property Value Type Description Quaternion Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Start the rotation Called by the agent Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which executes this task Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentSittingTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentSittingTask.html",
    "title": "Class AgentSittingTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentSittingTask Inheritance object BaseTask AgentBaseTask AgentSittingTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) AgentBaseTask.Abort() BaseTask.State BaseTask.OnTaskStarted BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentSittingTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentSittingTask(GameObject, SittingDirection) Enables the agent to sit on a prepared chair GameObject Declaration public AgentSittingTask(GameObject chair, SittingDirection direction = SittingDirection.TOGGLE) Parameters Type Name Description GameObject chair The chair to be sat on. Needs to have at least \"FeetPosition\" and \"SitPosition\" child objects. SittingDirection direction Either SITDOWN, STANDUP or TOGGLE. TOGGLE is equivalent to SITDOWN while standing and STANDUP while sitting. Properties Chair The chair the agent should sit on Declaration public GameObject Chair { get; protected set; } Property Value Type Description GameObject Direction The direction of the sitting task Can be sit down, stand up or toggle SITDOWN: the agent will sit down or stay sitting STANDUP: the agent will stand up or stay standing TOGGLE: if the agent is sitting, it will stand up; if the agent is standing, it will sit down Declaration public SittingDirection Direction { get; protected set; } Property Value Type Description SittingDirection Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer EvaluateTaskState() Declaration public override TaskState EvaluateTaskState() Returns Type Description TaskState Overrides BaseTask.EvaluateTaskState() Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentWaitTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentWaitTask.html",
    "title": "Class AgentWaitTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentWaitTask Makes the agent wait for a given amount of time Inheritance object BaseTask AgentBaseTask AgentWaitTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.OnTaskFinished AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.FinishTaskAsFailed() AgentBaseTask.WaitFor(params AgentBaseTask[]) BaseTask.State BaseTask.OnTaskStarted BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsAborted() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class AgentWaitTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentWaitTask() Declaration public AgentWaitTask() AgentWaitTask(float) Creates a new instance of the wait task Declaration public AgentWaitTask(float timeInSeconds) Parameters Type Name Description float timeInSeconds The number of secondsd that the agent should wait for Properties WaitTimeInSeconds The number of seconds that the agent should wait for Declaration public float WaitTimeInSeconds { get; set; } Property Value Type Description float Methods Abort() Aborts the wait task Declaration public override void Abort() Overrides AgentBaseTask.Abort() Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Start the waiting task Called by the agent Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which executes this task Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.html",
    "title": "Namespace i5.VirtualAgents.AgentTasks | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.AgentTasks Classes AgentAdaptiveGazeTask Starts or stops adaptive gaze on the agent and marks the task as completed afterwards. AgentAnimationTask Starts an animation by setting the trigger in the animator belonging to the agent. It will stop it after playtime second using the stop trigger if provided or else the startTrigger again AgentAudioTask AgentBaseTask Base class which provides default implementations for the interface methods Using this class avoids repeatedly implementing empty interface classes if they are not needed AgentDropTask Defines pick up tasks for picking up objects that are near to the agent Uses the NavMeshAgent component AgentMovementTask Defines movement tasks for walking and running Uses the NavMeshAgent component AgentPickUpTask Defines pick up tasks for picking up objects that are near to the agent Uses the NavMeshAgent component AgentRotationTask Defines rotation tasks for rotating the agent to a specific direction. The direction can be given as a target, coordinates or angle. AgentSittingTask AgentWaitTask Makes the agent wait for a given amount of time SerializationData<T> Pseudo dictonary, that in contrast to actual dictonaries is serializable, but only offers search in linear time. SerializationDataContainer SerializationEntry<T> Serialized data identified by a key. SerializedAudioClips SerializedAudioSources SerializedBools SerializedFloats SerializedGameobjects SerializedInts SerializedQuaternions SerializedStrings SerializedVectors Interfaces IAgentTask A task that directly manipualtes an agent ISerializable Allows a task be be serialized. Neccessary in order to use them with the visual Behaviour Tree editor. Enums SerializableType The types that can be serialized using the ISerializable interface. SittingDirection"
  },
  "api/i5.VirtualAgents.AgentTasks.IAgentTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.IAgentTask.html",
    "title": "Interface IAgentTask | Documentation of the Virtual Agents Framework",
    "keywords": "Interface IAgentTask A task that directly manipualtes an agent Inherited Members ITask.State ITask.EvaluateTaskState() ITask.StartExecution(Agent) ITask.StopExecution() ITask.Tick(Agent) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public interface IAgentTask : ITask Properties CanStart Indicates whether the task can start its execution False if there are unfulfilled conditions that block the execution Declaration bool CanStart { get; } Property Value Type Description bool Methods Abort() Aborts the task Declaration void Abort() Events OnTaskFinished Declaration event Action OnTaskFinished Event Type Type Description Action OnTaskStarted Declaration event Action OnTaskStarted Event Type Type Description Action"
  },
  "api/i5.VirtualAgents.AgentTasks.ISerializable.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.ISerializable.html",
    "title": "Interface ISerializable | Documentation of the Virtual Agents Framework",
    "keywords": "Interface ISerializable Allows a task be be serialized. Neccessary in order to use them with the visual Behaviour Tree editor. Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public interface ISerializable Methods Deserialize(SerializationDataContainer) Declaration void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializableType.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializableType.html",
    "title": "Enum SerializableType | Documentation of the Virtual Agents Framework",
    "keywords": "Enum SerializableType The types that can be serialized using the ISerializable interface. Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public enum SerializableType Fields Name Description AUDIOCLIP AUDIOSOURCE BOOL FLOAT GAMEOBJECT INT QUATERNION STRING VECTOR3"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializationData-1.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializationData-1.html",
    "title": "Class SerializationData<T> | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializationData<T> Pseudo dictonary, that in contrast to actual dictonaries is serializable, but only offers search in linear time. Inheritance object SerializationData<T> SerializedAudioClips SerializedAudioSources SerializedBools SerializedFloats SerializedGameobjects SerializedInts SerializedQuaternions SerializedStrings SerializedVectors Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializationData<T> Type Parameters Name Description T Fields data Declaration public List<SerializationEntry<T>> data Field Value Type Description System.Collections.Generic.List<T><SerializationEntry<T>> Methods Add(string, T) Declaration public void Add(string key, T value) Parameters Type Name Description string key T value Clear() Declaration public void Clear() Get(int) Declaration public SerializationEntry<T> Get(int index) Parameters Type Name Description int index Returns Type Description SerializationEntry<T> Get(string) Declaration public T Get(string key) Parameters Type Name Description string key Returns Type Description T KeyExists(string) Declaration public bool KeyExists(string key) Parameters Type Name Description string key Returns Type Description bool"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializationDataContainer.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializationDataContainer.html",
    "title": "Class SerializationDataContainer | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializationDataContainer Inheritance object SerializationDataContainer Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializationDataContainer Fields serializationOrder Declaration public List<SerializableType> serializationOrder Field Value Type Description System.Collections.Generic.List<T><SerializableType> serializedAudioClips Declaration public SerializedAudioClips serializedAudioClips Field Value Type Description SerializedAudioClips serializedAudioSources Declaration public SerializedAudioSources serializedAudioSources Field Value Type Description SerializedAudioSources serializedBools Declaration public SerializedBools serializedBools Field Value Type Description SerializedBools serializedFloats Declaration public SerializedFloats serializedFloats Field Value Type Description SerializedFloats serializedGameobjects Declaration public SerializedGameobjects serializedGameobjects Field Value Type Description SerializedGameobjects serializedInts Declaration public SerializedInts serializedInts Field Value Type Description SerializedInts serializedQuaternions Declaration public SerializedQuaternions serializedQuaternions Field Value Type Description SerializedQuaternions serializedStrings Declaration public SerializedStrings serializedStrings Field Value Type Description SerializedStrings serializedVectors Declaration public SerializedVectors serializedVectors Field Value Type Description SerializedVectors Methods AddSerializedData(string, AudioClip) Declaration public void AddSerializedData(string key, AudioClip value) Parameters Type Name Description string key AudioClip value AddSerializedData(string, AudioSource) Declaration public void AddSerializedData(string key, AudioSource value) Parameters Type Name Description string key AudioSource value AddSerializedData(string, GameObject) Declaration public void AddSerializedData(string key, GameObject value) Parameters Type Name Description string key GameObject value AddSerializedData(string, Quaternion) Declaration public void AddSerializedData(string key, Quaternion value) Parameters Type Name Description string key Quaternion value AddSerializedData(string, bool) Declaration public void AddSerializedData(string key, bool value) Parameters Type Name Description string key bool value AddSerializedData(string, int) Declaration public void AddSerializedData(string key, int value) Parameters Type Name Description string key int value AddSerializedData(string, float) Declaration public void AddSerializedData(string key, float value) Parameters Type Name Description string key float value AddSerializedData(string, string) Declaration public void AddSerializedData(string key, string value) Parameters Type Name Description string key string value AddSerializedData(string, Vector3) Declaration public void AddSerializedData(string key, Vector3 value) Parameters Type Name Description string key Vector3 value Clear() Deletes everything that was serialized Declaration public void Clear() GetKeyByIndex(int, SerializableType) Retrives the key of the item at position index. Declaration public string GetKeyByIndex(int index, SerializableType type) Parameters Type Name Description int index SerializableType type Returns Type Description string GetSerializedAudioClip(string) Declaration public AudioClip GetSerializedAudioClip(string key) Parameters Type Name Description string key Returns Type Description AudioClip GetSerializedAudioSource(string) Declaration public AudioSource GetSerializedAudioSource(string key) Parameters Type Name Description string key Returns Type Description AudioSource GetSerializedBool(string) Declaration public bool GetSerializedBool(string key) Parameters Type Name Description string key Returns Type Description bool GetSerializedFloat(string) Declaration public float GetSerializedFloat(string key) Parameters Type Name Description string key Returns Type Description float GetSerializedGameobjects(string) Declaration public GameObject GetSerializedGameobjects(string key) Parameters Type Name Description string key Returns Type Description GameObject GetSerializedInt(string) Declaration public int GetSerializedInt(string key) Parameters Type Name Description string key Returns Type Description int GetSerializedQuaternion(string) Declaration public Quaternion GetSerializedQuaternion(string key) Parameters Type Name Description string key Returns Type Description Quaternion GetSerializedString(string) Declaration public string GetSerializedString(string key) Parameters Type Name Description string key Returns Type Description string GetSerializedVector(string) Declaration public Vector3 GetSerializedVector(string key) Parameters Type Name Description string key Returns Type Description Vector3"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializationEntry-1.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializationEntry-1.html",
    "title": "Class SerializationEntry<T> | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializationEntry<T> Serialized data identified by a key. Inheritance object SerializationEntry<T> Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializationEntry<T> Type Parameters Name Description T Constructors SerializationEntry(string, T) Declaration public SerializationEntry(string key, T value) Parameters Type Name Description string key T value Fields Key Declaration public string Key Field Value Type Description string Value Declaration public T Value Field Value Type Description T"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedAudioClips.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedAudioClips.html",
    "title": "Class SerializedAudioClips | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedAudioClips Inheritance object SerializationData<AudioClip> SerializedAudioClips Inherited Members SerializationData<AudioClip>.data SerializationData<AudioClip>.Get(string) SerializationData<AudioClip>.Get(int) SerializationData<AudioClip>.Add(string, AudioClip) SerializationData<AudioClip>.Clear() SerializationData<AudioClip>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedAudioClips : SerializationData<AudioClip>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedAudioSources.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedAudioSources.html",
    "title": "Class SerializedAudioSources | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedAudioSources Inheritance object SerializationData<AudioSource> SerializedAudioSources Inherited Members SerializationData<AudioSource>.data SerializationData<AudioSource>.Get(string) SerializationData<AudioSource>.Get(int) SerializationData<AudioSource>.Add(string, AudioSource) SerializationData<AudioSource>.Clear() SerializationData<AudioSource>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedAudioSources : SerializationData<AudioSource>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedBools.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedBools.html",
    "title": "Class SerializedBools | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedBools Inheritance object SerializationData<bool> SerializedBools Inherited Members SerializationData<bool>.data SerializationData<bool>.Get(string) SerializationData<bool>.Get(int) SerializationData<bool>.Add(string, bool) SerializationData<bool>.Clear() SerializationData<bool>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedBools : SerializationData<bool>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedFloats.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedFloats.html",
    "title": "Class SerializedFloats | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedFloats Inheritance object SerializationData<float> SerializedFloats Inherited Members SerializationData<float>.data SerializationData<float>.Get(string) SerializationData<float>.Get(int) SerializationData<float>.Add(string, float) SerializationData<float>.Clear() SerializationData<float>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedFloats : SerializationData<float>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedGameobjects.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedGameobjects.html",
    "title": "Class SerializedGameobjects | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedGameobjects Inheritance object SerializationData<GameObject> SerializedGameobjects Inherited Members SerializationData<GameObject>.data SerializationData<GameObject>.Get(string) SerializationData<GameObject>.Get(int) SerializationData<GameObject>.Add(string, GameObject) SerializationData<GameObject>.Clear() SerializationData<GameObject>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedGameobjects : SerializationData<GameObject>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedInts.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedInts.html",
    "title": "Class SerializedInts | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedInts Inheritance object SerializationData<int> SerializedInts Inherited Members SerializationData<int>.data SerializationData<int>.Get(string) SerializationData<int>.Get(int) SerializationData<int>.Add(string, int) SerializationData<int>.Clear() SerializationData<int>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedInts : SerializationData<int>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedQuaternions.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedQuaternions.html",
    "title": "Class SerializedQuaternions | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedQuaternions Inheritance object SerializationData<Quaternion> SerializedQuaternions Inherited Members SerializationData<Quaternion>.data SerializationData<Quaternion>.Get(string) SerializationData<Quaternion>.Get(int) SerializationData<Quaternion>.Add(string, Quaternion) SerializationData<Quaternion>.Clear() SerializationData<Quaternion>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedQuaternions : SerializationData<Quaternion>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedStrings.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedStrings.html",
    "title": "Class SerializedStrings | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedStrings Inheritance object SerializationData<string> SerializedStrings Inherited Members SerializationData<string>.data SerializationData<string>.Get(string) SerializationData<string>.Get(int) SerializationData<string>.Add(string, string) SerializationData<string>.Clear() SerializationData<string>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedStrings : SerializationData<string>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedVectors.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedVectors.html",
    "title": "Class SerializedVectors | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedVectors Inheritance object SerializationData<Vector3> SerializedVectors Inherited Members SerializationData<Vector3>.data SerializationData<Vector3>.Get(string) SerializationData<Vector3>.Get(int) SerializationData<Vector3>.Add(string, Vector3) SerializationData<Vector3>.Clear() SerializationData<Vector3>.KeyExists(string) Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public class SerializedVectors : SerializationData<Vector3>"
  },
  "api/i5.VirtualAgents.AgentTasks.SittingDirection.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SittingDirection.html",
    "title": "Enum SittingDirection | Documentation of the Virtual Agents Framework",
    "keywords": "Enum SittingDirection Namespace: i5.VirtualAgents.AgentTasks Assembly: cs.temp.dll.dll Syntax public enum SittingDirection Fields Name Description SITDOWN STANDUP TOGGLE"
  },
  "api/i5.VirtualAgents.AimAt.AimDirection.html": {
    "href": "api/i5.VirtualAgents.AimAt.AimDirection.html",
    "title": "Enum AimAt.AimDirection | Documentation of the Virtual Agents Framework",
    "keywords": "Enum AimAt.AimDirection The direction of the aimTransform that should aim at the target Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public enum AimAt.AimDirection Fields Name Description X Y Z"
  },
  "api/i5.VirtualAgents.AimAt.html": {
    "href": "api/i5.VirtualAgents.AimAt.html",
    "title": "Class AimAt | Documentation of the Virtual Agents Framework",
    "keywords": "Class AimAt Implements the functionality of aiming at a target Inheritance object AimAt BaseLayerPreset HeadPreset LeftArmPreset LeftLegPreset RightArmPreset RightLegPreset Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public abstract class AimAt : MonoBehaviour Fields aimDirection Axis of the aimTransform that should aim at the target Declaration protected AimAt.AimDirection aimDirection Field Value Type Description AimAt.AimDirection aimTransform The Transform of the agent childobjects that should directly aim at the target Declaration protected Transform aimTransform Field Value Type Description Transform angleLimit The angle limit at which the aiming should stop Declaration protected float angleLimit Field Value Type Description float boneTransforms Array of the transforms of the bones that should be moved Declaration protected Transform[] boneTransforms Field Value Type Description Transform[] currentLookSpeed The speed at which the agent looks at the target Declaration protected float currentLookSpeed Field Value Type Description float distanceLimit The closest distance at which an object will be aimed at Declaration protected float distanceLimit Field Value Type Description float humanBones The bones that should be moved to accomplish the aiming Declaration protected HumanBone[] humanBones Field Value Type Description HumanBone[] increaseLookSpeedBy To increase the look speed, maximal value is 10 Declaration protected float increaseLookSpeedBy Field Value Type Description float iterations The number of iterations that the aiming algorithm should run Declaration protected int iterations Field Value Type Description int navMeshAgent Reference to the NavMeshAgent component Declaration protected NavMeshAgent navMeshAgent Field Value Type Description NavMeshAgent startingTransform The postion where the targetFollower should be placed when no target is set Declaration protected Transform startingTransform Field Value Type Description Transform targetFollower The Transform that is acutally looked at and will follow the target smootly Declaration protected Transform targetFollower Field Value Type Description Transform targetTransform The transform that should be aimed at Declaration protected Transform targetTransform Field Value Type Description Transform Properties LookSpeed The speed at which the agent looks at the target Declaration public float LookSpeed { get; set; } Property Value Type Description float ShouldDestroyItself true if the component should destroy itself, when the aiming stops and the aim is back at the starting position Declaration public bool ShouldDestroyItself { get; set; } Property Value Type Description bool Weight The weight of the aiming Declaration public float Weight { get; set; } Property Value Type Description float Methods AimAtTarget(Transform, Vector3, float) Declaration protected void AimAtTarget(Transform bone, Vector3 targetPosition, float weight) Parameters Type Name Description Transform bone Vector3 targetPosition float weight CalculateWhereToLook() Declaration protected Vector3 CalculateWhereToLook() Returns Type Description Vector3 GetAimDirectionVector() Declaration protected Vector3 GetAimDirectionVector() Returns Type Description Vector3 GetBoneTransformsFromAnimatior(HumanBodyBones) Declaration protected void GetBoneTransformsFromAnimatior(HumanBodyBones aimingTip) Parameters Type Name Description HumanBodyBones aimingTip LateUpdate() Declaration protected void LateUpdate() OnDrawGizmos() Declaration protected void OnDrawGizmos() SetBonePreset() To set up the aiming at a specific body part, a preset of bones and weights and related settings can be selected Declaration public abstract void SetBonePreset() SetTargetTransform(Transform) Declaration public void SetTargetTransform(Transform targetTransform) Parameters Type Name Description Transform targetTransform SetupAndStart(Transform, bool) Starts the aiming at the target with the given layer and target Declaration public void SetupAndStart(Transform target, bool shouldDestroyItself = true) Parameters Type Name Description Transform target The transform of the object that should be aimed at bool shouldDestroyItself If the component should destroy itself after aiming is stopped Start() Declaration protected virtual void Start() Stop() Removes the targetTransform, which results in the aim to return to the starting position, if shouldDestroyItself is set to true, the component will be destroyed after the aim is back at the starting position Declaration public void Stop() TemporarilyIncreaseLookSpeed(float) Declaration public void TemporarilyIncreaseLookSpeed(float increase) Parameters Type Name Description float increase UpdateTargetFollower() Declaration protected void UpdateTargetFollower() UseNewBoneset(HumanBone[], AimDirection, Transform, float) Instead of using a bone preset, the bones can be selected and weighted manually Declaration public void UseNewBoneset(HumanBone[] humanBones, AimAt.AimDirection aimDirection, Transform aimTransform, float angleLimit) Parameters Type Name Description HumanBone[] humanBones The bones and weights that should be moved to accomplish the aiming AimAt.AimDirection aimDirection The direction going out of the aimTransform that should directly point at the target Transform aimTransform The last point of the bones that should directly point at the target float angleLimit The limit at which pointing will be stopped, i.e. 90f to only aim when target is somewhere in front of the agent"
  },
  "api/i5.VirtualAgents.BaseLayerPreset.html": {
    "href": "api/i5.VirtualAgents.BaseLayerPreset.html",
    "title": "Class BaseLayerPreset | Documentation of the Virtual Agents Framework",
    "keywords": "Class BaseLayerPreset Inheritance object AimAt BaseLayerPreset Inherited Members AimAt.targetTransform AimAt.aimTransform AimAt.aimDirection AimAt.targetFollower AimAt.currentLookSpeed AimAt.increaseLookSpeedBy AimAt.navMeshAgent AimAt.iterations AimAt.angleLimit AimAt.distanceLimit AimAt.startingTransform AimAt.humanBones AimAt.boneTransforms AimAt.ShouldDestroyItself AimAt.LookSpeed AimAt.Weight AimAt.Start() AimAt.SetupAndStart(Transform, bool) AimAt.Stop() AimAt.LateUpdate() AimAt.CalculateWhereToLook() AimAt.UpdateTargetFollower() AimAt.AimAtTarget(Transform, Vector3, float) AimAt.GetAimDirectionVector() AimAt.SetTargetTransform(Transform) AimAt.TemporarilyIncreaseLookSpeed(float) AimAt.UseNewBoneset(HumanBone[], AimAt.AimDirection, Transform, float) AimAt.GetBoneTransformsFromAnimatior(HumanBodyBones) AimAt.OnDrawGizmos() Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class BaseLayerPreset : AimAt Methods SetBonePreset() Declaration public override void SetBonePreset() Overrides AimAt.SetBonePreset()"
  },
  "api/i5.VirtualAgents.BaseTask.html": {
    "href": "api/i5.VirtualAgents.BaseTask.html",
    "title": "Class BaseTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class BaseTask Inheritance object BaseTask AgentBaseTask Implements ITask Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public abstract class BaseTask : ITask Properties State The state of the task Declaration public TaskState State { get; set; } Property Value Type Description TaskState Methods EvaluateTaskState() Called by the executing agent on running tasks Performs frame-to-frame task execution updates This is e.g. useful for tracking movements towards a target and determinig when the agent has reached the target Declaration public virtual TaskState EvaluateTaskState() Returns Type Description TaskState StartExecution(Agent) Gets the reference to the agent which will execute this task Starts the task's execution Declaration public virtual void StartExecution(Agent executingAgent) Parameters Type Name Description Agent executingAgent StopAsAborted() Can be used to abort the task outside of its Update method Declaration public void StopAsAborted() StopAsFailed() Can be used to fail the task outside of its Update method Declaration public void StopAsFailed() StopAsSucceeded() Can be used to let the task succseed outside of its Update method Declaration public void StopAsSucceeded() StopExecution() Called when the task succeedes or fails Declaration public virtual void StopExecution() Tick(Agent) Updates the State and automatically invokes StartExecution() on first update and StopExeuction() when task succeeds/fails. Declaration public TaskState Tick(Agent excutingAgent) Parameters Type Name Description Agent excutingAgent Returns Type Description TaskState Events OnTaskStarted Event called when the task is started Declaration public event Action OnTaskStarted Event Type Type Description Action Implements ITask"
  },
  "api/i5.VirtualAgents.Editor.Tests.EditorTestScript.html": {
    "href": "api/i5.VirtualAgents.Editor.Tests.EditorTestScript.html",
    "title": "Class EditorTestScript | Documentation of the Virtual Agents Framework",
    "keywords": "Class EditorTestScript Inheritance object EditorTestScript Namespace: i5.VirtualAgents.i5.VirtualAgents.Editor.Tests Assembly: cs.temp.dll.dll Syntax public class EditorTestScript Methods EditorTestMenuItems() Declaration public void EditorTestMenuItems()"
  },
  "api/i5.VirtualAgents.Editor.Tests.html": {
    "href": "api/i5.VirtualAgents.Editor.Tests.html",
    "title": "Namespace i5.VirtualAgents.Editor.Tests | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.Editor.Tests Classes EditorTestScript"
  },
  "api/i5.VirtualAgents.HeadPreset.html": {
    "href": "api/i5.VirtualAgents.HeadPreset.html",
    "title": "Class HeadPreset | Documentation of the Virtual Agents Framework",
    "keywords": "Class HeadPreset Inheritance object AimAt HeadPreset Inherited Members AimAt.targetTransform AimAt.aimTransform AimAt.aimDirection AimAt.targetFollower AimAt.currentLookSpeed AimAt.increaseLookSpeedBy AimAt.navMeshAgent AimAt.iterations AimAt.angleLimit AimAt.distanceLimit AimAt.startingTransform AimAt.humanBones AimAt.boneTransforms AimAt.ShouldDestroyItself AimAt.LookSpeed AimAt.Weight AimAt.Start() AimAt.SetupAndStart(Transform, bool) AimAt.Stop() AimAt.LateUpdate() AimAt.CalculateWhereToLook() AimAt.UpdateTargetFollower() AimAt.AimAtTarget(Transform, Vector3, float) AimAt.GetAimDirectionVector() AimAt.SetTargetTransform(Transform) AimAt.TemporarilyIncreaseLookSpeed(float) AimAt.UseNewBoneset(HumanBone[], AimAt.AimDirection, Transform, float) AimAt.GetBoneTransformsFromAnimatior(HumanBodyBones) AimAt.OnDrawGizmos() Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class HeadPreset : AimAt Methods SetBonePreset() Declaration public override void SetBonePreset() Overrides AimAt.SetBonePreset()"
  },
  "api/i5.VirtualAgents.html": {
    "href": "api/i5.VirtualAgents.html",
    "title": "Namespace i5.VirtualAgents | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents Classes AdaptiveGaze Defines a gaze behaviour that looks at gaze targets in the scene dynamically AdaptiveGazeTarget Agent Agent's functionality mainly includes managing their task queue, responding to task execution statuses and changing one's state accordingly AgentAnimationUpdater Component for synchronizing the agent's movement with the shown animation AgentImportMenu This script provides a menu item to create an agent from a humanoid model AimAt Implements the functionality of aiming at a target BaseLayerPreset BaseTask HeadPreset HumanBone Item Represents an item which can be picked up by an agent LeftArmPreset LeftLegPreset MeshSocket Socket on the agent to which items can be attached, e.g., for hands or item belts on the agent MeshSockets Collects and advertises the available mesh sockets to other scripts RightArmPreset RightLegPreset TaskBundle A task which consists of multiple subtasks. It allows for checking of preconditions and then executing a sequence of tasks. TaskSystem TestAllSamples Interfaces ITask Task that can be executed by ITaskSystems. Needs to be updated with FullUpdate() in order to perform work. ITaskSystem Provides means for updating a task system and scheduling new tasks. Enums AimAt.AimDirection The direction of the aimTransform that should aim at the target MeshSockets.SocketId TaskState The state of a task, one out of five possible states: waiting, running, failure, success, aborted"
  },
  "api/i5.VirtualAgents.HumanBone.html": {
    "href": "api/i5.VirtualAgents.HumanBone.html",
    "title": "Class HumanBone | Documentation of the Virtual Agents Framework",
    "keywords": "Class HumanBone Inheritance object HumanBone Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax [Serializable] public class HumanBone Fields bone The bone of the agents body Declaration public HumanBodyBones bone Field Value Type Description HumanBodyBones weight The influence weight of the bone Declaration public float weight Field Value Type Description float"
  },
  "api/i5.VirtualAgents.ITask.html": {
    "href": "api/i5.VirtualAgents.ITask.html",
    "title": "Interface ITask | Documentation of the Virtual Agents Framework",
    "keywords": "Interface ITask Task that can be executed by ITaskSystems. Needs to be updated with FullUpdate() in order to perform work. Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public interface ITask Properties State The current state of the task Declaration TaskState State { get; set; } Property Value Type Description TaskState Methods EvaluateTaskState() Evaluates the task's current state Declaration TaskState EvaluateTaskState() Returns Type Description TaskState StartExecution(Agent) Gets the reference to the agent which will execute this task Starts the task's execution Declaration void StartExecution(Agent executingAgent) Parameters Type Name Description Agent executingAgent StopExecution() Called when the task succeeds or fails Declaration void StopExecution() Tick(Agent) Updates the State and automatically invokes StartExecution() on first update and StopExecution() when task succeeds/fails. Declaration TaskState Tick(Agent executingAgent) Parameters Type Name Description Agent executingAgent Returns Type Description TaskState"
  },
  "api/i5.VirtualAgents.ITaskSystem.html": {
    "href": "api/i5.VirtualAgents.ITaskSystem.html",
    "title": "Interface ITaskSystem | Documentation of the Virtual Agents Framework",
    "keywords": "Interface ITaskSystem Provides means for updating a task system and scheduling new tasks. Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public interface ITaskSystem Methods UpdateTaskSystem() Updates the task system Declaration void UpdateTaskSystem()"
  },
  "api/i5.VirtualAgents.Item.html": {
    "href": "api/i5.VirtualAgents.Item.html",
    "title": "Class Item | Documentation of the Virtual Agents Framework",
    "keywords": "Class Item Represents an item which can be picked up by an agent Inheritance object Item Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class Item : MonoBehaviour Fields dropEvent This event can be listend to, to get notified when the item is dropped Declaration public UnityEvent dropEvent Field Value Type Description UnityEvent Properties CanBePickedUp Determines if the item can be picked up Declaration public bool CanBePickedUp { get; set; } Property Value Type Description bool GrabTarget grab is where IK of the Hand will be applied to, for example a handle of a cup. Initially it is the same as the object itself. Declaration public Transform GrabTarget { get; } Property Value Type Description Transform IsPickedUp Declaration public bool IsPickedUp { get; set; } Property Value Type Description bool Methods IsDropped() Declaration public void IsDropped()"
  },
  "api/i5.VirtualAgents.LeftArmPreset.html": {
    "href": "api/i5.VirtualAgents.LeftArmPreset.html",
    "title": "Class LeftArmPreset | Documentation of the Virtual Agents Framework",
    "keywords": "Class LeftArmPreset Inheritance object AimAt LeftArmPreset Inherited Members AimAt.targetTransform AimAt.aimTransform AimAt.aimDirection AimAt.targetFollower AimAt.currentLookSpeed AimAt.increaseLookSpeedBy AimAt.navMeshAgent AimAt.iterations AimAt.angleLimit AimAt.distanceLimit AimAt.startingTransform AimAt.humanBones AimAt.boneTransforms AimAt.ShouldDestroyItself AimAt.LookSpeed AimAt.Weight AimAt.Start() AimAt.SetupAndStart(Transform, bool) AimAt.Stop() AimAt.LateUpdate() AimAt.CalculateWhereToLook() AimAt.UpdateTargetFollower() AimAt.AimAtTarget(Transform, Vector3, float) AimAt.GetAimDirectionVector() AimAt.SetTargetTransform(Transform) AimAt.TemporarilyIncreaseLookSpeed(float) AimAt.UseNewBoneset(HumanBone[], AimAt.AimDirection, Transform, float) AimAt.GetBoneTransformsFromAnimatior(HumanBodyBones) AimAt.OnDrawGizmos() Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class LeftArmPreset : AimAt Methods SetBonePreset() Declaration public override void SetBonePreset() Overrides AimAt.SetBonePreset()"
  },
  "api/i5.VirtualAgents.LeftLegPreset.html": {
    "href": "api/i5.VirtualAgents.LeftLegPreset.html",
    "title": "Class LeftLegPreset | Documentation of the Virtual Agents Framework",
    "keywords": "Class LeftLegPreset Inheritance object AimAt LeftLegPreset Inherited Members AimAt.targetTransform AimAt.aimTransform AimAt.aimDirection AimAt.targetFollower AimAt.currentLookSpeed AimAt.increaseLookSpeedBy AimAt.navMeshAgent AimAt.iterations AimAt.angleLimit AimAt.distanceLimit AimAt.startingTransform AimAt.humanBones AimAt.boneTransforms AimAt.ShouldDestroyItself AimAt.LookSpeed AimAt.Weight AimAt.Start() AimAt.SetupAndStart(Transform, bool) AimAt.Stop() AimAt.LateUpdate() AimAt.CalculateWhereToLook() AimAt.UpdateTargetFollower() AimAt.AimAtTarget(Transform, Vector3, float) AimAt.GetAimDirectionVector() AimAt.SetTargetTransform(Transform) AimAt.TemporarilyIncreaseLookSpeed(float) AimAt.UseNewBoneset(HumanBone[], AimAt.AimDirection, Transform, float) AimAt.GetBoneTransformsFromAnimatior(HumanBodyBones) AimAt.OnDrawGizmos() Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class LeftLegPreset : AimAt Methods SetBonePreset() Declaration public override void SetBonePreset() Overrides AimAt.SetBonePreset()"
  },
  "api/i5.VirtualAgents.MeshSocket.html": {
    "href": "api/i5.VirtualAgents.MeshSocket.html",
    "title": "Class MeshSocket | Documentation of the Virtual Agents Framework",
    "keywords": "Class MeshSocket Socket on the agent to which items can be attached, e.g., for hands or item belts on the agent Inheritance object MeshSocket Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class MeshSocket : MonoBehaviour Properties SocketId The id of the socket Declaration public MeshSockets.SocketId SocketId { get; } Property Value Type Description MeshSockets.SocketId Methods Attach(Item) Attaches an item to the mesh socket based on the definition which is encoded in hte item Declaration public void Attach(Item item) Parameters Type Name Description Item item The item to attach to the socket Detach(Item) Detaches the given item from the socket Declaration public void Detach(Item item) Parameters Type Name Description Item item Detaches the item from the socket"
  },
  "api/i5.VirtualAgents.MeshSockets.html": {
    "href": "api/i5.VirtualAgents.MeshSockets.html",
    "title": "Class MeshSockets | Documentation of the Virtual Agents Framework",
    "keywords": "Class MeshSockets Collects and advertises the available mesh sockets to other scripts Inheritance object MeshSockets Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class MeshSockets : MonoBehaviour Properties TwoBoneIKConstraintLeftArm Define the two bone IK constraints for the left arm that is used in the AgentPickUpTask Declaration public TwoBoneIKConstraint TwoBoneIKConstraintLeftArm { get; set; } Property Value Type Description TwoBoneIKConstraint TwoBoneIKConstraintRightArm Define the two bone IK constraints for the arms that is used in the AgentPickUpTask Declaration public TwoBoneIKConstraint TwoBoneIKConstraintRightArm { get; set; } Property Value Type Description TwoBoneIKConstraint Methods Attach(Item, SocketId) Attaches an item to the socket with the given ID Declaration public void Attach(Item item, MeshSockets.SocketId socketId) Parameters Type Name Description Item item The item to attach MeshSockets.SocketId socketId The ID by which the socket can be found Detach(Item) Detaches an item from its socket Declaration public void Detach(Item item) Parameters Type Name Description Item item The item to detach"
  },
  "api/i5.VirtualAgents.MeshSockets.SocketId.html": {
    "href": "api/i5.VirtualAgents.MeshSockets.SocketId.html",
    "title": "Enum MeshSockets.SocketId | Documentation of the Virtual Agents Framework",
    "keywords": "Enum MeshSockets.SocketId Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public enum MeshSockets.SocketId Fields Name Description AdditionalSocket1 AdditionalSocket10 AdditionalSocket2 AdditionalSocket3 AdditionalSocket4 AdditionalSocket5 AdditionalSocket6 AdditionalSocket7 AdditionalSocket8 AdditionalSocket9 HipsBackLeft HipsBackRight HipsFrontLeft HipsFrontRight LeftBack LeftHand LeftLowerArm LeftUpperArm RightBack RightHand RightLowerArm RightUpperArm"
  },
  "api/i5.VirtualAgents.RightArmPreset.html": {
    "href": "api/i5.VirtualAgents.RightArmPreset.html",
    "title": "Class RightArmPreset | Documentation of the Virtual Agents Framework",
    "keywords": "Class RightArmPreset Inheritance object AimAt RightArmPreset Inherited Members AimAt.targetTransform AimAt.aimTransform AimAt.aimDirection AimAt.targetFollower AimAt.currentLookSpeed AimAt.increaseLookSpeedBy AimAt.navMeshAgent AimAt.iterations AimAt.angleLimit AimAt.distanceLimit AimAt.startingTransform AimAt.humanBones AimAt.boneTransforms AimAt.ShouldDestroyItself AimAt.LookSpeed AimAt.Weight AimAt.Start() AimAt.SetupAndStart(Transform, bool) AimAt.Stop() AimAt.LateUpdate() AimAt.CalculateWhereToLook() AimAt.UpdateTargetFollower() AimAt.AimAtTarget(Transform, Vector3, float) AimAt.GetAimDirectionVector() AimAt.SetTargetTransform(Transform) AimAt.TemporarilyIncreaseLookSpeed(float) AimAt.UseNewBoneset(HumanBone[], AimAt.AimDirection, Transform, float) AimAt.GetBoneTransformsFromAnimatior(HumanBodyBones) AimAt.OnDrawGizmos() Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class RightArmPreset : AimAt Methods SetBonePreset() Declaration public override void SetBonePreset() Overrides AimAt.SetBonePreset()"
  },
  "api/i5.VirtualAgents.RightLegPreset.html": {
    "href": "api/i5.VirtualAgents.RightLegPreset.html",
    "title": "Class RightLegPreset | Documentation of the Virtual Agents Framework",
    "keywords": "Class RightLegPreset Inheritance object AimAt RightLegPreset Inherited Members AimAt.targetTransform AimAt.aimTransform AimAt.aimDirection AimAt.targetFollower AimAt.currentLookSpeed AimAt.increaseLookSpeedBy AimAt.navMeshAgent AimAt.iterations AimAt.angleLimit AimAt.distanceLimit AimAt.startingTransform AimAt.humanBones AimAt.boneTransforms AimAt.ShouldDestroyItself AimAt.LookSpeed AimAt.Weight AimAt.Start() AimAt.SetupAndStart(Transform, bool) AimAt.Stop() AimAt.LateUpdate() AimAt.CalculateWhereToLook() AimAt.UpdateTargetFollower() AimAt.AimAtTarget(Transform, Vector3, float) AimAt.GetAimDirectionVector() AimAt.SetTargetTransform(Transform) AimAt.TemporarilyIncreaseLookSpeed(float) AimAt.UseNewBoneset(HumanBone[], AimAt.AimDirection, Transform, float) AimAt.GetBoneTransformsFromAnimatior(HumanBodyBones) AimAt.OnDrawGizmos() Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class RightLegPreset : AimAt Methods SetBonePreset() Declaration public override void SetBonePreset() Overrides AimAt.SetBonePreset()"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskManager.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskManager.html",
    "title": "Class AgentTaskManager | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentTaskManager Inheritance object AgentTaskManager Namespace: i5.VirtualAgents.ScheduleBasedExecution Assembly: cs.temp.dll.dll Syntax public class AgentTaskManager Constructors AgentTaskManager() Creates a new task manager but does not yet associate an agent with it If you use this method, you need to call the AssociateAgent method at some point before scheduled tasks can be executed Declaration public AgentTaskManager() AgentTaskManager(Agent) Creates a new task manager and associates with an agent Declaration public AgentTaskManager(Agent agent) Parameters Type Name Description Agent agent The agent on which scheduled tasks should be executed Properties CurrentState Agent's current state Declaration public TaskManagerState CurrentState { get; } Property Value Type Description TaskManagerState CurrentTask Agent's current task Declaration public IAgentTask CurrentTask { get; } Property Value Type Description IAgentTask ExecutingAgent Agent which will execute the scheduled tasks Declaration public Agent ExecutingAgent { get; } Property Value Type Description Agent IsActive Checks whether the task manager is active or has been deactivated Only returns false if the task manager has explicitly been deactivated Declaration public bool IsActive { get; set; } Property Value Type Description bool Methods Abort() Aborts the current task Declaration public void Abort() AssociateAgent(Agent) Associates an agent with the task manager Scheduled tasks can only run if an agent was registered with the task manager, either using this method or the constructor which takes an agent as an argument Declaration public void AssociateAgent(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the scheduled tasks CheckTaskQueueStates() Checks the states of all tasks as an \"and\"-operation in the queue. Declaration public TaskState CheckTaskQueueStates() Returns Type Description TaskState Failure if one of the Tasks in the queue failed, Success if all Task finished successfully and the state of the current task in the queue, as long as not all tasks have run, but none has failed yet Clear(bool) Removes all tasks from the queue and sets the state of the task manager to idle Declaration public void Clear(bool clearCurrentTask) Parameters Type Name Description bool clearCurrentTask Determines whether the current task should be aborted as well PeekNextTask() Peeks at the next task that the task manager will execute after the current one Declaration public IAgentTask PeekNextTask() Returns Type Description IAgentTask Returns the next task to execute, null if no task is upcoming RemoveTask(IAgentTask) Removes a task from the task queue Declaration public void RemoveTask(IAgentTask task) Parameters Type Name Description IAgentTask task The task to be removed ScheduleTask(IAgentTask, int) Schedules a task in the queue, sorted by the given priority Declaration public void ScheduleTask(IAgentTask task, int priority = 0) Parameters Type Name Description IAgentTask task The task that should be scheduled for execution int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Update() Enable the right mode depending on the agent's status Declaration public void Update() Events OnQueueEmpty Event which is raised once there are no more tasks in the queue Declaration public event Action OnQueueEmpty Event Type Type Description Action OnStateChanged Event which is raised once the agent's state changes Declaration public event Action OnStateChanged Event Type Type Description Action OnTaskFinished Event which is raised once the agent has finished the current task Declaration public event AgentTaskManager.TaskFinishedEvent OnTaskFinished Event Type Type Description AgentTaskManager.TaskFinishedEvent"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskManager.TaskFinishedEvent.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskManager.TaskFinishedEvent.html",
    "title": "Delegate AgentTaskManager.TaskFinishedEvent | Documentation of the Virtual Agents Framework",
    "keywords": "Delegate AgentTaskManager.TaskFinishedEvent Event handler for finished tasks Namespace: i5.VirtualAgents.ScheduleBasedExecution Assembly: cs.temp.dll.dll Syntax public delegate void AgentTaskManager.TaskFinishedEvent(AgentTaskManager sender, IAgentTask finishedTask) Parameters Type Name Description AgentTaskManager sender The task manager on which the task finished IAgentTask finishedTask The task that finished"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskQueue.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskQueue.html",
    "title": "Class AgentTaskQueue | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentTaskQueue Holds an IAgentTask queue Inheritance object AgentTaskQueue Namespace: i5.VirtualAgents.ScheduleBasedExecution Assembly: cs.temp.dll.dll Syntax public class AgentTaskQueue Constructors AgentTaskQueue() Create an empty IAgentTask queue Declaration public AgentTaskQueue() Fields taskQueue Declaration public List<AgentTaskQueue.TaskEntry> taskQueue Field Value Type Description System.Collections.Generic.List<T><AgentTaskQueue.TaskEntry> Methods AddTask(IAgentTask, int) Add a new task to the queue according to the FIFO principle but with priority categories Declaration public void AddTask(IAgentTask task, int priority = 0) Parameters Type Name Description IAgentTask task Any task that implements the IAgentTask interface int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Clear() Removes all tasks from the queue Declaration public void Clear() PeekNextTask() Peeks the next task in the queue Declaration public IAgentTask PeekNextTask() Returns Type Description IAgentTask Returns the next upcoming task in the queue, null if no more tasks are queued RemoveTask(IAgentTask) Removes a task from the task queue Declaration public void RemoveTask(IAgentTask task) Parameters Type Name Description IAgentTask task Task to be removed RequestNextTask() Request the next task from the queue Declaration public IAgentTask RequestNextTask() Returns Type Description IAgentTask Next task from the queue or null if the queue is empty"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskQueue.TaskEntry.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskQueue.TaskEntry.html",
    "title": "Struct AgentTaskQueue.TaskEntry | Documentation of the Virtual Agents Framework",
    "keywords": "Struct AgentTaskQueue.TaskEntry Contains a task and its corresponding priority Namespace: i5.VirtualAgents.ScheduleBasedExecution Assembly: cs.temp.dll.dll Syntax public struct AgentTaskQueue.TaskEntry Fields priority Declaration public int priority Field Value Type Description int task Declaration public IAgentTask task Field Value Type Description IAgentTask"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.html",
    "title": "Namespace i5.VirtualAgents.ScheduleBasedExecution | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.ScheduleBasedExecution Classes AgentTaskManager AgentTaskQueue Holds an IAgentTask queue ScheduleBasedTaskSystem Executes tasks by scheduling them in a priority queue TaskActions List of shortcuts to schedule actions on an agent Structs AgentTaskQueue.TaskEntry Contains a task and its corresponding priority Enums TaskManagerState The different states that the agent's task manager can be in Delegates AgentTaskManager.TaskFinishedEvent Event handler for finished tasks"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.ScheduleBasedTaskSystem.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.ScheduleBasedTaskSystem.html",
    "title": "Class ScheduleBasedTaskSystem | Documentation of the Virtual Agents Framework",
    "keywords": "Class ScheduleBasedTaskSystem Executes tasks by scheduling them in a priority queue Inheritance object TaskSystem ScheduleBasedTaskSystem Implements ITaskSystem Namespace: i5.VirtualAgents.ScheduleBasedExecution Assembly: cs.temp.dll.dll Syntax public class ScheduleBasedTaskSystem : TaskSystem, ITaskSystem Properties Tasks List of shortcut methods to add common tasks to the agent's task queue Syntactic sugar. It is also possible to directly enqueue task objects on the agent instead, e.g. for custom tasks Declaration public TaskActions Tasks { get; } Property Value Type Description TaskActions Methods Abort(string) Aborts the current task on the specified layer Declaration public void Abort(string layer = \"Base Layer\") Parameters Type Name Description string layer Name of the layer on which the task should be aborted AbortAllLayers() Aborts the current tasks on all layers Declaration public void AbortAllLayers() Clear(string, bool) Clears all tasks from the given layer Declaration public void Clear(string layer = \"Base Layer\", bool clearCurrentTask = true) Parameters Type Name Description string layer The layer whose tasks should be cleared, leave empty to clear base layer. bool clearCurrentTask If true, the current tasks gets aborted and removed as well, otherwise it can still finish. By default set to true ClearAllLayers(bool) Clears all tasks from all layers Declaration public void ClearAllLayers(bool clearCurrentTask = true) Parameters Type Name Description bool clearCurrentTask If true, the current tasks gets aborted and removed as well, otherwise it can still finish. By default set to true GetAgent() Get the agent component of the game object Declaration public Agent GetAgent() Returns Type Description Agent The agent component RemoveTask(IAgentTask, string) Removes a given task from the TaskSystem Declaration public void RemoveTask(IAgentTask task, string layer = \"Base Layer\") Parameters Type Name Description IAgentTask task The task to be removed string layer The layer on which the given task resides ScheduleTask(IAgentTask, int, string) Schedule a task Declaration public void ScheduleTask(IAgentTask task, int priority = 0, string layer = \"Base Layer\") Parameters Type Name Description IAgentTask task Task to be scheduled int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value string layer UpdateTaskSystem() Update the task system Declaration public override void UpdateTaskSystem() Overrides TaskSystem.UpdateTaskSystem() Implements ITaskSystem"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.TaskActions.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.TaskActions.html",
    "title": "Class TaskActions | Documentation of the Virtual Agents Framework",
    "keywords": "Class TaskActions List of shortcuts to schedule actions on an agent Inheritance object TaskActions Namespace: i5.VirtualAgents.ScheduleBasedExecution Assembly: cs.temp.dll.dll Syntax public class TaskActions Constructors TaskActions(ScheduleBasedTaskSystem) Creates a new task actions shortcut and registers the schedule system on which the tasks are scheduled Declaration public TaskActions(ScheduleBasedTaskSystem scheduleTaskSystem) Parameters Type Name Description ScheduleBasedTaskSystem scheduleTaskSystem The agent on which the tasks are scheduled and executed Methods ActivateOrDeactivateAdaptiveGaze(bool, int) Creates an adaptiveGazeTask that activates or deactivates the AdaptiveGaze component on the agent Declaration public void ActivateOrDeactivateAdaptiveGaze(bool shouldStartOrStop, int priority = 0) Parameters Type Name Description bool shouldStartOrStop If true, will start adaptive Gaze. If false will stop adaptive gaze int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. DropItem(GameObject, int) Drop one specified or all object that are currently attached to the agent and have the Item component Shortcut queue management function Declaration public AgentBaseTask DropItem(GameObject dropObject = null, int priority = 0) Parameters Type Name Description GameObject dropObject The item that should be dropped, no item will result in all items being dropped int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoTo(GameObject, Vector3, int, bool) Creates an AgentMovementTask for walking/running to a specific GameObject and schedules it or forces its execution. Shortcut queue management function Declaration public AgentBaseTask GoTo(GameObject destinationObject, Vector3 offset = null, int priority = 0, bool follow = false) Parameters Type Name Description GameObject destinationObject GameObject the agent should go to Vector3 offset int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. bool follow Decides if the Agent should follow the GameObject, dynamically, even if the path cannot reach the GameObject Returns Type Description AgentBaseTask GoTo(Transform, Vector3, int) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public AgentBaseTask GoTo(Transform destinationTransform, Vector3 offset = null, int priority = 0) Parameters Type Name Description Transform destinationTransform Vector3 offset int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoTo(Vector3, int) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Schedules a AgentRotationTask to rotate the agent towards the destination Shortcut queue management function Declaration public AgentBaseTask GoTo(Vector3 destinationCoordinates, int priority = 0) Parameters Type Name Description Vector3 destinationCoordinates Position the agent should go to int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoToAndDropItem(Transform, GameObject, int) Go to a transform and drop one specified or all object that are currently attached to the agent and have the Item component Shortcut queue management function Declaration public AgentBaseTask GoToAndDropItem(Transform destinationTransform, GameObject dropObject = null, int priority = 0) Parameters Type Name Description Transform destinationTransform Transform the agent should go to GameObject dropObject The item that should be dropped, no item will result in all items being dropped int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoToAndDropItem(Vector3, GameObject, int) Go to coordinates and drop one specified or all object that are currently attached to the agent and have the Item component Shortcut queue management function Declaration public AgentBaseTask GoToAndDropItem(Vector3 destinationCoordinates, GameObject dropObject = null, int priority = 0) Parameters Type Name Description Vector3 destinationCoordinates Position the agent should go to GameObject dropObject The item that should be dropped, no item will result in all items being dropped int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoToAndPickUp(GameObject, int, SocketId, float) Go to an object with the Item component and pick it up when near enough. Might fail, when object is moving too fast. Shortcut queue management function Declaration public AgentBaseTask GoToAndPickUp(GameObject destinationObject, int priority = 0, SocketId bodyAttachPoint = null, float minDistance = 0.3) Parameters Type Name Description GameObject destinationObject Object the agent should go to and pick up. Needs to have an item component and be reachable by the agent. int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. SocketId bodyAttachPoint Agent socket that the object should be attached to, standard is the right Hand float minDistance Distance at which the the agent will try to pick up the object Returns Type Description AgentBaseTask PickUp(GameObject, int, SocketId) Pick up an object with the Item component that is currently in reach of the agent Shortcut queue management function Declaration public AgentBaseTask PickUp(GameObject pickupObject, int priority = 0, SocketId bodyAttachPoint = null) Parameters Type Name Description GameObject pickupObject Object that should be picked up. Needs to have an item component and be near to the agent. int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. SocketId bodyAttachPoint Agent socket that the object should be attached to, standard is the right Hand Returns Type Description AgentBaseTask PlayAnimation(string, float, string, int, string, GameObject) Play an animation through the agents animation controller Shortcut queue management function Declaration public AgentBaseTask PlayAnimation(string startTrigger, float playTime, string stopTrigger = \"\", int priority = 0, string layer = \"Base Layer\", GameObject aimTarget = null) Parameters Type Name Description string startTrigger Trigger that starts the animation float playTime Time in seconds after which the animation should stop string stopTrigger Trigger that stops the animation. If not provided, start trigger is used again int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. string layer The animation layer on which the task should be executed GameObject aimTarget The target at which the agent should aim while playing the animation Returns Type Description AgentBaseTask PointAt(GameObject, bool, bool, int, int) Use this function to make the agent point at a target object with one arm If the target is behind the agent, the agent will first rotate towards the target Declaration public AgentBaseTask PointAt(GameObject target, bool aimLeftArm = false, bool aimRightArm = false, int aimAtTime = 5, int priority = 0) Parameters Type Name Description GameObject target Target to point at bool aimLeftArm True if the agent should aim with the left arm bool aimRightArm True if the agent should aim with the right arm int aimAtTime How long the agent aims int priority Priority of the task Returns Type Description AgentBaseTask StartAdaptiveGazeForTime(float, int) Creates an adaptiveGazeTask that activates the AdaptiveGaze component, then a wait task on the head and then a task that deactivates the AdaptiveGaze component. These a scheduled so that they play one after another. Declaration public AgentBaseTask[] StartAdaptiveGazeForTime(float seconds, int priority = 0) Parameters Type Name Description float seconds Time in seconds after which the gazing should stop int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask[] Returns a AgentBaseTask array with two elements. The first has the starting Task (e.g. for startTask.waitFor(differentTask), and the second the stop Task ((e.g. for differentTask.waitFor(stopTask)) WaitForSeconds(float, int, string) Lets the agent wait for the given number of seconds in an idle position Shortcut queue management function Declaration public AgentBaseTask WaitForSeconds(float seconds, int priority = 0, string layer = \"Base Layer\") Parameters Type Name Description float seconds The time span in seconds for which the agent should wait int priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. string layer The animation layer on which the task should be executed Returns Type Description AgentBaseTask"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.TaskManagerState.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.TaskManagerState.html",
    "title": "Enum TaskManagerState | Documentation of the Virtual Agents Framework",
    "keywords": "Enum TaskManagerState The different states that the agent's task manager can be in Namespace: i5.VirtualAgents.ScheduleBasedExecution Assembly: cs.temp.dll.dll Syntax public enum TaskManagerState Fields Name Description busy The agent is busy and is currently executing a task idle An idle state where nothing is to do and new tasks can be started inactive The task manager is inactive, e.g. if no agent is associated with it yet or if it has been deactived deliberately In an inactive state, no tasks are executed or started waiting The agent waits for a condition to become true so that the next task can be started"
  },
  "api/i5.VirtualAgents.TaskBundle.html": {
    "href": "api/i5.VirtualAgents.TaskBundle.html",
    "title": "Class TaskBundle | Documentation of the Virtual Agents Framework",
    "keywords": "Class TaskBundle A task which consists of multiple subtasks. It allows for checking of preconditions and then executing a sequence of tasks. Inheritance object TaskBundle Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class TaskBundle : AgentBaseTask Constructors TaskBundle() Creates an empty TaskBundle Declaration public TaskBundle() TaskBundle(List<AgentBaseTask>, List<Func<bool>>) Creates a TaskBundle with a list of tasks and a list of preconditions Declaration public TaskBundle(List<AgentBaseTask> tasks, List<Func<bool>> preconditions) Parameters Type Name Description System.Collections.Generic.List<T><AgentBaseTask> tasks System.Collections.Generic.List<T><Func<><bool>> preconditions TaskBundle(List<AgentBaseTask>) Creates a TaskBundle with a list of tasks Declaration public TaskBundle(List<AgentBaseTask> tasks) Parameters Type Name Description System.Collections.Generic.List<T><AgentBaseTask> tasks Properties Preconditions List of conditions to be met before execution of tasks Declaration public List<Func<bool>> Preconditions { get; } Property Value Type Description System.Collections.Generic.List<T><Func<><bool>> Methods AddPrecondition(Func<bool>) Adds a precondition to the list of preconditions after initialisation Note: Preconditions are only checked before the tasks are executed, a precondition added after the execution has started will not be checked Declaration public void AddPrecondition(Func<bool> precondition) Parameters Type Name Description Func<><bool> precondition The precondition to be added to the list of preconditions AddTask(AgentBaseTask) Adds a task to the task queue after initialisation Declaration public void AddTask(AgentBaseTask task) Parameters Type Name Description AgentBaseTask task The task to be added to the task queue AddTasks(List<AgentBaseTask>) Adds a list of tasks to the task queue after initialisation Declaration public void AddTasks(List<AgentBaseTask> taskList) Parameters Type Name Description System.Collections.Generic.List<T><AgentBaseTask> taskList The task list to be added to the task queue EvaluateTaskState() Execute all tasks in the task queue. If a task fails, the whole bundle fails. Note, that checking of preconditions is not part of this method. Declaration public override TaskState EvaluateTaskState() Returns Type Description TaskState StartExecution(Agent) Check for preconditions and start the execution of all subtasks in sequence Declaration public override void StartExecution(Agent executingAgent) Parameters Type Name Description Agent executingAgent"
  },
  "api/i5.VirtualAgents.TaskState.html": {
    "href": "api/i5.VirtualAgents.TaskState.html",
    "title": "Enum TaskState | Documentation of the Virtual Agents Framework",
    "keywords": "Enum TaskState The state of a task, one out of five possible states: waiting, running, failure, success, aborted Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public enum TaskState Fields Name Description Aborted Failure Running Success Waiting"
  },
  "api/i5.VirtualAgents.TaskSystem.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.html",
    "title": "Class TaskSystem | Documentation of the Virtual Agents Framework",
    "keywords": "Class TaskSystem Inheritance object TaskSystem ScheduleBasedTaskSystem Implements ITaskSystem Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public abstract class TaskSystem : MonoBehaviour, ITaskSystem Methods UpdateTaskSystem() Updates the task system Declaration public abstract void UpdateTaskSystem() Implements ITaskSystem"
  },
  "api/i5.VirtualAgents.TestAllSamples.html": {
    "href": "api/i5.VirtualAgents.TestAllSamples.html",
    "title": "Class TestAllSamples | Documentation of the Virtual Agents Framework",
    "keywords": "Class TestAllSamples Inheritance object TestAllSamples Namespace: i5.VirtualAgents Assembly: cs.temp.dll.dll Syntax public class TestAllSamples : IPrebuildSetup Methods Cleanup() Declaration public void Cleanup() Setup() Declaration public void Setup() SetUpTest() Declaration public void SetUpTest() TearDownTest() Declaration public void TearDownTest() VerifySceneAdaptiveGaze() Declaration public IEnumerator VerifySceneAdaptiveGaze() Returns Type Description System.Collections.IEnumerator VerifySceneAiming() Declaration public IEnumerator VerifySceneAiming() Returns Type Description System.Collections.IEnumerator VerifySceneDynamicNavigation() Declaration public IEnumerator VerifySceneDynamicNavigation() Returns Type Description System.Collections.IEnumerator VerifySceneIndependentTasks() Declaration public IEnumerator VerifySceneIndependentTasks() Returns Type Description System.Collections.IEnumerator VerifySceneItem() Declaration public IEnumerator VerifySceneItem() Returns Type Description System.Collections.IEnumerator VerifySceneNavigation() Declaration public IEnumerator VerifySceneNavigation() Returns Type Description System.Collections.IEnumerator VerifySceneSynchronizedTasks() Declaration public IEnumerator VerifySceneSynchronizedTasks() Returns Type Description System.Collections.IEnumerator VerifySceneWait() Declaration public IEnumerator VerifySceneWait() Returns Type Description System.Collections.IEnumerator VerifyTaskBundle() Declaration public IEnumerator VerifyTaskBundle() Returns Type Description System.Collections.IEnumerator"
  },
  "api/i5.VirtualAgents.Utilities.DebugDrawTransformAxes.html": {
    "href": "api/i5.VirtualAgents.Utilities.DebugDrawTransformAxes.html",
    "title": "Class DebugDrawTransformAxes | Documentation of the Virtual Agents Framework",
    "keywords": "Class DebugDrawTransformAxes Inheritance object DebugDrawTransformAxes Namespace: i5.VirtualAgents.Utilities Assembly: cs.temp.dll.dll Syntax public class DebugDrawTransformAxes : MonoBehaviour"
  },
  "api/i5.VirtualAgents.Utilities.DebugDrawTransformSphere.html": {
    "href": "api/i5.VirtualAgents.Utilities.DebugDrawTransformSphere.html",
    "title": "Class DebugDrawTransformSphere | Documentation of the Virtual Agents Framework",
    "keywords": "Class DebugDrawTransformSphere Inheritance object DebugDrawTransformSphere Namespace: i5.VirtualAgents.Utilities Assembly: cs.temp.dll.dll Syntax public class DebugDrawTransformSphere : MonoBehaviour Fields color The color of the sphere. Declaration public Color color Field Value Type Description Color radius The radius of the sphere Declaration public float radius Field Value Type Description float"
  },
  "api/i5.VirtualAgents.Utilities.html": {
    "href": "api/i5.VirtualAgents.Utilities.html",
    "title": "Namespace i5.VirtualAgents.Utilities | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.Utilities Classes DebugDrawTransformAxes DebugDrawTransformSphere"
  },
  "index.html": {
    "href": "index.html",
    "title": "Virtual Agents Framework | Documentation of the Virtual Agents Framework",
    "keywords": "Virtual Agents Framework A Unity package for creating virtual agents. This framework provides the architecture, assets and samples for creating own virtual agents, also called non-player characters (NPCs), in Unity. Setup Minimum Unity version: 2020.3. There are different ways to add the package to a project. Alternative 1: OpenUPM using the Package Manager UI The first option to install the package is to include it via Unity's package manager. Here, we first need to add a scoped registry which tells Unity that the package is hosted on OpenUPM. After that, we can add the package in Unity's package manager window. In Unity, go to Window > Package Manager to open the package manager UI. In the right corner of the opened windows, click on the small cogwheel and select \"Advanced Project Settings\". Add a new scoped registry with the following values: Field Value(s) Name: package.openupm.com URL: https://package.openupm.com Scope(s): com.i5.toolkit.core com.i5.virtualagents Next, click the Save/Apply button. Close the settings window and return to the package manager window. Click the small plus button at the left top of the window. Select \"\"Add package by name...\" or \"Add package from git URL...\" depending on your Unity version. Enter com.i5.virtualagents in the text field. If the package manager asks for a version number, enter the latest one, so 1.3.0. Click the add button and wait for the download to finish. As an alternative to steps 7 - 8, the package should also be available in the list if you switch the dropdown next to the plus button from \"Packages: Unity Registry\" to \"Packages: My Registries\". You can then select the entry and click the \"Install\" button. Alternative 2: OpenUPM with manifest.json file A second option is to directly edit the manifest.json file of your project. In alternative 1, Unity performs this in the background, but you can also just copy-paste the necessary scoped registry definitions and add the package directly in the manifest.json file. Open a file explorer and navigation into your project's root folder (the folder which contains sub-directories like \"Assets\" or \"Library\"). Then, navigate into the \"Packages\" folder and open the \"manifest.json\" file. Integrate the following json string into the manifest.json file: { \"scopedRegistries\": [ { \"name\": \"package.openupm.com\", \"url\": \"https://package.openupm.com\", \"scopes\": [ \"com.i5.toolkit.core\", \"com.i5.virtualagents\" ] } ], \"dependencies\": { \"com.i5.virtualagents\": \"1.3.0\" } } If your manifest.json file already contains a scopedRegistries array, make sure to add the entry to the existing one. If your scopedRegistries array already contains an entry with the name \"package.openupm.com\", just add the given scopes to that list. In that case, there is no need to create a second \"package.openupm.com\" entry. The entry \"com.i5.virtualagents\": \"1.3.0\" can be inserted anywhere in the dependencies object with the other installed packages that are already listed there. Alternative 3: Git Package You can also directly include the package as a Git repository. First, you need to install the i5 Toolkit for Unity by following one of its installation instructions in the readme file. This step needs to happen first - otherwise there is an error message as Unity cannot resolve the dependency. In Unity, go to \"Window > Package Manager\" to open the package manager window. Click the plus button in the top left corner and select \"Add package from git URL...\". Enter https://github.com/rwth-acis/Virtual-Agents-Framework.git#[version] into the text field where [version] is replaced with \"v\", followed by the release number, e.g. \"v1.3.0\" or upm for the latest version. Confirm the download by clicking on the \"add\" button. If you specify \"upm\" to get the latest version, be aware that the package is not automatically updated and you will not be notified about updates automatically. This command just pulls the latest version which is available at that time. To update to the newest current version, remove the package again and re-download it. Quickstart Guide As part of the documentation a quickstart guide can be found here. Documentation Check out the documentation pages and select the version that you are using. You can also find practical examples of features in the package's samples. To access them, follow these steps: In Unity, go to \"Window > Package Manager\". Make sure that the dropdown menu in the top left of the package manager window is set to \"Packages: In Project\". Click on the entry for the Virtual Agents Framework in the list. On the right side, expand the samples section. Here, you can find a list of available examples. Click the import button to download the samples. They are saved in your Assets folder in a folder \"Samples/Virtual Agents Framework/1.3.0\". Usually, each sample contains a sample scene as the starting point. Within the scene, there is a documentation object, indicated by an information icon. If you click on it, there are further descriptions about the scene in the inspector. Licensing The package's code is distributed under the MIT license. All art assets (e.g. files located in the folders \"3D Models\" and \"Animations\" in the package's root folder) are distributed under the Creative Commons Attribution 4.0 International license and are attributed to Benedikt Hensen unless stated otherwise. Contributors Code & Documentation: Benedikt Hensen Danylo Bekhter Sebastian Meinberger David Terhürne Lena Linke 3D Models & Animations: Benedikt Hensen David Terhürne Related Projects This framework uses the i5 Toolkit for Unity which provides building blocks and modules for general development with the Unity 3D engine. If you want to use the virtual agents in mixed reality, check out our i5 Toolkit for Mixed Reality. It is an extension package that builds upon the functionality of the i5 Toolkit for Unity and is optimized for mixed reality."
  },
  "manual/adaptive-gaze.html": {
    "href": "manual/adaptive-gaze.html",
    "title": "Adaptive Gaze | Documentation of the Virtual Agents Framework",
    "keywords": "Adaptive Gaze To make an agent look more life like it can automatically look at objects in front of him, swerve between the objects, idle in between and pick up on sudden interest changes, like objects that start to move. To get this functionally the AdaptiveGaze component needs to be added to the agent. The automatic gaze is automatically overwritten if a AgentAnimationTask is played on the head layer of the agent and will be reactivated when the animation ends. The selection of a gaze Target can also be overwritten, so that the agent looks constantly at the object specified in OverwriteGazeTarget. Algorithm The agent scans for objects ahead that are on the specified seeLayers and checks if they have the AdaptiveGazeTarget component. Then, it assesses their visibility using the occlusionLayers. To determine the relevance to the agent, several factors are considered, including distance to the target, target-defined importance, duration of the agent's gaze, and perceived novelty. timeLookedAt is modified in two ways: timeLookedAt increases every time that the item is looked at. timeLookedAt decreases every time that the item is not looked at. novelty is modified in two ways: novelty increases by 5 if the item has not been looked at before. novelty increases by 10 if the importance of the item increased since last seeing it. novelty decreases by 1 every time that the item is looked at. Setup Requirements The agent needs the AdaptiveGaze component. Targets that can be looked at need to be on specific layers, specified in seeLayers. Objects that should obstruct the view of the agent need to be on specific layers, specified in occlusionLayers. Objects that should be looked at need the AdaptiveGazeTarget component. AdaptiveGazeTarget needs to be on one of the seeLayers that was specified in the agent. The layer can be changed in the top right corner of the inspector. (optional) A collider that makes sense for the Target, if no target is added a standard collider will be added, see ExampleOfAutoCollider in the sample scene. The standard for seeLayers is Everything and the standard for occlusionLayers is Default. It is very much recommended that one or more layers are created (as explained here) and set as seeLayers for the purpose of identifying possible gaze targets as that drastically reduces the computation load. Starting and stopping adaptive gazing Activate() and Deactivate() can be used to start and stop the adaptive gazing directly on the AdaptiveGaze component. The following shortcuts that are part of the task actions are also available to schedule adaptive gazing as a task : ActivateOrDeactivateAdaptiveGaze: Start or stops adaptive gazing until it is stopped or started again. This is realized with a task that only runs once. This also automatically adds a AdaptiveGaze component if the agent doesn't have one. StartAdaptiveGazeForTime: Schedule a task that starts adaptive gazing for the specified time and then deactivates it by scheduling a wait task between a start and stop task. This will also stop adaptive gazing, when it was started with ActivateOrDeactivateAdaptiveGaze before. Starting the adaptive gaze as a task can be useful as it e.g. allows for the task to be scheduled or wait for a different task to finish using the WaitFor function, see example scene. Options - AdaptiveGaze The AdaptiveGaze component has several options that can be modified to fit the agents purpose or personality: detectionRadius defines how big the detection cube in which items can be seen in front of the agent is. Use Window > Analysis > Physics Debug > Queries to see the detection radius, decrease detection Interval to see the cube on every frame. maxNumberOfTargetsInRange should be an upper limit of how many items can be in front of the agent, otherwise undefined behaviour. detectionIntervalWhenWalking and detectionIntervalWhenIdle is the detection interval in which the detection cube is checked for items in seconds. Longer intervals allow the agent to look after items that move, even when they move outside the detection cube. chanceHighestRankedTarget, chanceSecondHighestTarget, chanceThirdHighestTarget define the chances for looking at the most interesting, second interesting and third interesting item based on the calculated interest value. chanceRandomTarget defines the chance for looking at a random item in sight. chanceIdleTarget defines the chance for the agent to not look at anything specific and to play the ideal animation instead. OverwriteGazeTarget defines a target that the agent will look at as long is it is set Options - AdaptiveGazeTarget Importance defines how important the object is to any agent from 1-10. If the Importance increases since the agent last looked at it, the novelty for that target will also be increased for that agent. CanCurrentlyBeLookedAt can be used to switch the objects perceivability off. This is used by the Item component when the item is picked up or dropped. Example Scenes The framework contains one example scene that demonstrates the adaptive gaze functionality. In that the agent walks past multiple objects with the AdaptiveGazeTarget component and looks at them dynamically. The AdaptiveGazeSampleController adds multiple waypoints where the agent should walk. Optionally, the sample controller also provides options to overwrite the adaptive gaze at the beginning for a specified AimAtTime. Alternatively, while in play mode any object can be dragged into the OverwriteGazeTarget attribute of AdaptiveGaze to make the agent look at it constantly. The example scene also demonstrates how the Shortcut Task actions can be used to activate adaptive gazing. Activate useTaskActionsForAdaptiveGaze on the controller to use that example in Play Mode."
  },
  "manual/aiming.html": {
    "href": "manual/aiming.html",
    "title": "Aiming | Documentation of the Virtual Agents Framework",
    "keywords": "Aiming The framework provides the capabilities to have an agent point or aim at something in the scene. The provided aiming capabilities are used by the adaptive gaze and the inverse kinematics pointing/aiming animation, that can be used by specifying a target in the AgentAnimationTask or in the shortcut PlayAnimation(string, float, string, int, string, GameObject). All of these automatically add a AimAt to the agent. AimAt Script The AimAt script defines what the target is, what part(s) of the agent should point at the target, and what bones move to accomplish the pointing. There are several bone presets, for example Right Arm that can be selected by specifying a layer. As of now the aiming animation has predefined options for the following: Right Arm Left Arm Right Leg Left Leg Head Base Layer (orient chest, spine and hips towards the target) The AimAt script can be extended to allow for more or differently weighted bone presets. Example Scenes The framework contains one example scene that directly demonstrates the pointing functionality, as well as the adaptive gaze sample that uses the aiming capabilities indirectly. In the 'AimingSample' the agent aims at a moving target with its two hands and its head. The AimingSampleController has the option to add multiple waypoints where the agent should walk, while pointing at the targets. If selected in the inspector the controller adds pointing tasks for the head, the left arm and the right arm. It also allows to first play a wave animation on the right arm."
  },
  "manual/audio.html": {
    "href": "manual/audio.html",
    "title": "Audio Tasks | Documentation of the Virtual Agents Framework",
    "keywords": "Audio Tasks AgentAudioTask is a task that plays an audio clip. It can be used to add sound effects or speech to the agent's actions. The PauseAudio() and ContinueAudio() functions can be used to pause and continue the audio playback. One can use the SpatialBlend property of the AudioSource component to adjust how much differently the audio sounds, depending on angle and distance towards the agent, meaning how \"3D\" it sounds. When set to 0, the audio sounds the same, regardless of camera position. When set to 1, it can only be heard when near and directly facing the agent. Construct an Audio Task For an audio task the following prerequisites are necessary: The agent needs an AudioSource component. This should already be set up in the agent prefab. An audio file to be played. You can use all file types supported by Unity's Audio Clip type, see here. To receive the audio, you need a GameObject with an AudioListener component, typically the camera. Then simply create an AgentAudioTask object and pass the audio clip to its constructor. Example: // Add your audio file in the editor [SerializeField] private AudioClip audioClip; public void Start() { AgentAudioTask audioTask = new AgentAudioTask(audioClip); // The audio should play as soon as the scheduler starts the task taskSystem.ScheduleTask(audioTask); StartCoroutine(PauseAndResumeAudio(audioTask)); } // Pause and resume the audio after a few seconds private IEnumerator PauseAndResumeAudio(AgentAudioTask audioTask) { yield return new WaitForSeconds(5); // Pause Audio audioTask.PauseAudio(); yield return new WaitForSeconds(2); // Continue Audio audioTask.ContinueAudio(); } Example Scene In the provided Audio Sample scene, the agent plays a recording of the documentation page, pausing for a short time while doing so. Then a short sound effect follows."
  },
  "manual/items.html": {
    "href": "manual/items.html",
    "title": "Items | Documentation of the Virtual Agents Framework",
    "keywords": "Items Objects that an agent can interact with in any way, should get the Item component. Currently, this allows items to be picked up and dropped. Picking Up and Dropping Items Items can be picked up with a AgentPickUpTask or PickUp when they are close enough, the task will fail if the object is not near enough or if CanBePickedUp of the items return false. To bring an agent easily in the reach of an item the shortcut GoToAndPickUp can be used. With all methods a socket can be specified to which the item will be attached when after it is picked up. Currently, the following sockets are supported: MeshSockets.SocketId.RightHand MeshSockets.SocketId.LeftHand MeshSockets.SocketId.RightLowerArm MeshSockets.SocketId.LeftLowerArm MeshSockets.SocketId.RightUpperArm MeshSockets.SocketId.LeftUpperArm MeshSockets.SocketId.RightBack MeshSockets.SocketId.LeftBack MeshSockets.SocketId.HipsFrontLeft MeshSockets.SocketId.HipsFrontRight MeshSockets.SocketId.HipsBackLeft MeshSockets.SocketId.HipsBackRight MeshSockets.SocketId.AdditionalSocket1 to MeshSockets.SocketId.AdditionalSocket10 The position and rotation of existing sockets can be changed by modifying the corresponding game objects in the Agent Prefab under Agent > AnimationRigging > MeshSockets. Up to 10 additional Sockets can also be added there, by creating a new game object with a Multi-Parent Constraint and the MeshSocket component. In the MeshSocket component one of the 10 MeshSockets.SocketId.AdditionalSocketX can be selected and then also be used in the code. When the LeftHand or RightHand socket is selected a simple inverse kinematics (IK) animation on the hand will be played, for all other sockets the animation will be played on the right hand. The item can also specify a GrabTarget, this is where the IK animation will aim for and also what will we placed at the socket. The hand of the agent will also automatically be rotated towards the GrabTarget. Items can be dropped with a AgentDropTask or the shortcut DropItem. This will detach the item from the agent and invoke the dropEvent of the Item. As seen in the example this could be used to reactivate physics on the item. Requirements The agent needs the MeshSockets and RigBuilder components, as well as everything that is part of the AnimationRigging child object in the agent prefab, in which the Sockets for the item positions are defined as well as the inverse kinematics animation for the grab animation. For more information on the used Unity Package see animation rigging package. Items that should be picked up need the Item component. The Items CanBePickedUp method needs to return true. (optional) A GrabTarget can be defined, that's where the agent will move its hand position and rotation wise and what attaches to the specified socked when picking the object up. The default is the local zero coordinates of the item. Example Scenes The framework contains an example scene that demonstrates the ability to pick up and drop items. The samples contain a ItemController that controls the movement of the items in the scene, moving them in squares as long as there are not picked up. It also listens to the items dropEvent and activates the Rigidbody physics of the sword item when the event is invoked. The ItemPickUpSampleController first adds a movement task and a pickup task for each item in the scene, as defined in the controller object. Two swords will be picked up by the right hand, the first one gets attached to the hand socket, while the second one gets attached to the spine socket. The third item is a ring that gets picked up and attached to the left hand. The last item is a pill formed item, that will be picked up and held in the left hand. After that the first item is dropped at a specified point. The second item is dropped by calling the method that drops all items at a specific point. Adaptive Gaze To make an agent appear more life-like it can automatically look at objects and items in front of him, swerve between the objects, idle in between and pick up on sudden interest changes, like objects that start to move. To make the agent look at objects that are about to be picked up the AdaptiveGazeTarget component can be added to the object. It will automatically be deactivated when the object is picked up. See adaptive gaze for more information."
  },
  "manual/own-agents.html": {
    "href": "manual/own-agents.html",
    "title": "Adding Own Agent Models and Animations | Documentation of the Virtual Agents Framework",
    "keywords": "Adding Own Agent Models and Animations The framework already provides a standard agent which can be added as a prefab. However, if you want to add your own character, for example from a 3D scan, this is also possible. The following explains how to create a new agent from scratch or as an alternative example how to import models created with the service called Ready Player Me. Preparing the Character To create a new agent from scratch, first add a humanoid character to your project. The character needs to be rigged. So, it requires a skeleton that was set up in a 3D software like Blender. The rig is what drives the movements of the character and it defines which parts of the mesh are deformed during an animation. Import Into Unity In Unity's import settings, set the rig type to \"humanoid\" so that animations can be transferred to the new character. Check the configuration of the rig mapping to make sure that bones are correctly transferred to Unity's default humanoid rig. In this configuration, there are also more advanced settings for the muscles. Usually, you do not need to worry about them but if you want your agent to be more or less flexible than defined in the animations, you can accomplish this with the muscle settings. Setup in the Scene After finishing the setup, you can add the character to your scene. The character should now be similar to the standard agent's 3D model that the framework provides in Virtual Agents Framework/Runtime/3D Models/AgentStandard.fbx. To configure the character correctly to work as an agent the Virtual Agents Framework provides an automatic import functionality. After that your character should be similar to the prefab of the working standard agent that can be found in Assets/Virtual Agents Framework/Runtime/Prefabs/AgentStandard.prefab. Select the parent GameObject of your character in the scene and in the top menu of Unity click Virtual Agents Framework > Custom Model Agent Import > Create Agent from Humanoid Model. Now a GameObject called AgentBasedOnCharacterObjectName should be selected in the scene. The character is now ready to be used as an agent with all functionalities. The automatic import function uses an agent prefab without a model found at Packages/com.i5.virtualagents/Runtime/Prefabs/AgentWithoutModel.prefab. To make the import of multiple agents that all need the same changes easier, the AgentWithoutModel.prefab can be copied and named CustomAgentWithoutModel.prefab. If that prefab is anywhere in the project the import function always uses the CustomAgentWithoutModel.prefab to configure the new agents. Optional: Adjust Animation Controller Usually, it suffices to take the existing standard controller as a basis. T extend the animation range of the agent, it is recommended to copy the existing controller and to extend it rather than starting with a blank controller. However, to create a controller from scratch, it needs to follow these guidelines: There needs to be a blend tree that mixes an idle and a walking animation so that the agent can walk. The blend tree is driven by an input parameter called \"Speed\". If you choose a different name, also adapt the parameter name on the AnimationSynchronizer component. Replacing Existing Animations with Own Ones If you just want to substitute the standard animations but keep the general structure of the controller, you can also copy the controller and substitute the animations with your own imported ones. If you choose a different walking animation for the blend tree, make sure to recalculate the threshold values according to the speed value of the animation. If the threshold value of the blend tree is incorrect, the agent's feet will slide along the ground during walking. Also, make sure to set up the NavMeshAgent component by determining the corresponding speed and rotation values. The speed of the NavMeshAgent component should correspond to the speed threshold value of the blend tree in the animator component. With a lower value, the agent will not be able to walk at the full speed as intended by the animation. A higher value will cause foot sliding as the animation is too slow to keep up with the movement speed. Importing Custom Models from Ready Player Me Ready Player Me is a service that provides easy assess to custom avatars that can be used for rapid prototyping or as an avatar system. As an example we will show here how an avatar created on Ready Player Me can be turned into an agent. Create a Ready Player Me avatar here To easily import the avatar, the Ready Player Me SDK for Unity can be used. Optionally the Avatar can also be downloaded as a gbl file and turned into a fbx file with programs like blender to import the avatar normally as in the steps above. Copy the provided .gbl URL after avatar creation Follow the first step here to import the Ready Player Me Unity SDK into your package. Optionally, the other steps of the installation guide can be followed but there are not needed here. Close the Setup Guide menu. In the top menu of Unity click Ready Player Me > Avatar Loaded. In the new window copy the .gbl URL of step 2 and load the avatar. Select the loaded avatar in the scene and in the top menu of Unity click Virtual Agents Framework > Custom Model Agent Import > Create Agent from Humanoid Model. The avatar should now be ready to function as an agent."
  },
  "manual/parallel-tasks.html": {
    "href": "manual/parallel-tasks.html",
    "title": "Parallel Tasks | Documentation of the Virtual Agents Framework",
    "keywords": "Parallel Tasks Tasks cannot only be executed sequentially but also in parallel if they, e.g., affect different regions of the agent's body. This means that an agent can, e.g., walk while waving its hand at the same time. To realize this, the Virtual Agents Framework provides a parallel tasks structure where tasks can be scheduled independently but also be synchronized using dependencies between tasks. Parallel Structure The agent consists of a series of task managers which determine which task to execute next. By calling ScheduleTask without specifying a layer, the task, by default, affects the entire body. Apart from this, there is a separate task manager for each relevant body region of the agent. Currently, this includes the following body regions: Left Arm Right Arm Left Leg Right Leg Head When applying parallel tasks, the main use case is to layer animations. It is recommended to always assign an animation task to the base layer and then overwrite a specific body region with a custom animation. In the example of the walking agent which is waving its hand, the walking animation would be set up as a task on the base layer. The waving animation is scheduled as a task on one of the two arm regions. As a result, the agent displays the full walking movements and only its arm is concerned with the waving motion. Synchronizing Task Layers In some cases, tasks need to wait for each other to start synchronously. In more complex tasks, this can be achieved by implementing a start condition on the tasks using the CanStart property. This pre-condition can contain any Boolean expression. A task can, e.g., wait for another task but it can also wait for a specific condition in the agent's environment to become true. Apart from this general purpose start-condition, the AgentBaseTask also implements a dependency system where tasks can automatically wait for each other. If task a depends on the completion of task b and both inherit from AgentBaseTask, call a.WaitFor(b). Internally, WaitFor creates a pre-condition for task a. The CanStart property of a will only become true, once b has finished its execution, indicated by its IsFinished property. If task a depends on multiple tasks b and c, they can quickly be defined in WaitFor by listing all depending tasks as a.WaitFor(b, c). Example Scenes The framework contains two example scenes for parallel tasks: One of them demonstrates the independent execution of parallel tasks. Here, the agent is assigned a series of walking tasks on its base layer and a combination of waiting and waving tasks on its left arm layer, as well as a head-shaking animation for the head. The tasks are just executed but do not contain any synchronization. In contract to this, the synchronization sample contains the same task sequence but here, the second waving animation will wait for the head shaking animation to complete. Both samples contain a TasksSampleController which demonstrates how to schedule the tasks and how to set the dependencies."
  },
  "manual/quickstart-guide.html": {
    "href": "manual/quickstart-guide.html",
    "title": "Quickstart-guide | Documentation of the Virtual Agents Framework",
    "keywords": "Quickstart-guide After importing the package this page is meant to get you going and introduce basic functionality. Setting up the scene Have or add a ground to your scene that the agent will walk on, i.e. by right-clicking in the hierarchy and selecting 3D Object > Plane. Add the standard agent prefab from Packages/com.i5.virtualagents/Runtime/Prefabs/AgentStandard.prefab to the scene. Add a NavMesh Surface to the scene by right-clicking the hierarchy and selecting AI > NavMesh Surface. Select the NavMesh Surface and press on Bake to create the NavMesh Data. The NavMesh represents where the agent can walk, so this has to be repeated after every change to the possible walking space of the agent. Adding Tasks to an agent Add an empty GameObject to the scene that will function as a controller object. Select the controller object and add a new script. This script will add different tasks to the agents schedule. We will call it ScheduleController. To start, the script should look like this: using UnityEngine; using i5.VirtualAgents; using i5.VirtualAgents.ScheduleBasedExecution; public class ScheduleController : MonoBehaviour { // The agent which is controlled by this controller, set in the inspector public Agent agent; // The taskSystem of the agent protected ScheduleBasedTaskSystem taskSystem; protected void Start() { // Get the task system of the agent taskSystem = (ScheduleBasedTaskSystem)agent.TaskSystem; //Add tasks below //... } } To add tasks for the agent multiple TaskActions are available, that can be used like this: taskSystem.Tasks.GoTo(Vector3.zero); This line can be added in the Start() function to call it once or anywhere else in the Script. With GoTo(Vector3.zero) a walking Task is added to the agent, that will make him walk to the origin of the scene. To find more explanations of different TaskActions and how tasks work generally see here. Samples At this point it is recommended to take a look at the samples provided with the package. To access them, follow these steps: In Unity, go to \"Window > Package Manager\". Make sure that the dropdown menu in the top left of the package manager window is set to \"Packages: In Project\". Click on the entry for the Virtual Agents Framework in the list. On the right side, expand the samples section. Here, you can find a list of available examples. Click the import button to download the samples. They are saved in your Assets folder in a folder Samples/Virtual Agents Framework/{version}. Every sample provides one or more documentation object that explains how the scene and the functions behind that scene work, and also links to recommended manual pages here. Going from least to most complex, it is recommended to look at the samples in the following order: Navigation Sample Wait Sample Dynamic Navigation Sample Rotation Sample (manual page) Audio Sample (manual page) TaskBundle Sample (manual page) Parallel Task Sample (manual page) Aiming Sample (manual page) Sitting Sample (manual page) Adaptive Gaze Sample (manual page) Item Pickup Sample (manual page) Customization of agents To make the application look more appealing from the beginning custom agent models can be used, see Adding Own Agent Models and Animations for that."
  },
  "manual/rotation.html": {
    "href": "manual/rotation.html",
    "title": "Rotation | Documentation of the Virtual Agents Framework",
    "keywords": "Rotation The rotation task enables one to rotate the agent by an angle, towards an angle, towards an object or towards coordinates, around the y-axis. Usage First create a new AgentRotationTask and provide it either with an angle, a target object or target coordinates. The constructor using the angle parameter has an extra boolean parameter isRotationByAngle that determines if the agent should rotate by the angle or towards it. This is set to True by default. To then use the task, schedule it as usual. This illustration shows the difference between rotating towards and by an angle: Example: // Rotate towards a target object AgentRotationTask rotationTarget= new AgentRotationTask(waypoints[1].gameObject); // Rotate towards a coordinate AgentRotationTask rotationCoordinate= new AgentRotationTask(waypoints[2].position); // Rotate by a specific angle, by leaving the second parameter on its default AgentRotationTask rotationAngle1= new AgentRotationTask(90); // Change the rotation value of the agent to a specific angle AgentRotationTask rotationAngle2= new AgentRotationTask(90, false); // Schedule the tasks taskSystem.ScheduleTask(rotationTarget, 0, \"Base Layer\"); taskSystem.ScheduleTask(rotationCoordinate, 0, \"Base Layer\"); taskSystem.ScheduleTask(rotationAngle1, 0, \"Base Layer\"); taskSystem.ScheduleTask(rotationAngle2, 0, \"Base Layer\"); Example Scene The framework's RotationSample example scene demonstrates the different types of rotation. The agent first rotates towards a target object (here the first waypoint), then towards a coordinate (the coordinates of the second waypoint), and finally rotates by 90° and then towards 90°."
  },
  "manual/sitting.html": {
    "href": "manual/sitting.html",
    "title": "Sitting | Documentation of the Virtual Agents Framework",
    "keywords": "Sitting The agent has the ability to sit on chairs or other objects of variable height. To do this, the GameObject the agent should sit on needs to have multiple positions defined, which are marked as Empty child GameObjects. Requirements GameObjects intended to be used for sitting must be set up with the following Empty GameObjects as children: \"SitPosition\" - The position where the agent should sit, i.e. the position the hip should rest at while sitting. \"FeetPosition\" - The position the agent should stand before and after sitting. The agent should walk to this position before initiating the task. \"Footrest\" - The position the agent should rest his feet on while sitting. This might be the literal footrest of a chair or an arbitrary position in the air, for chairs where the agent can't reach the ground with their feet. This is the only optional position, as the FeetPosition will be used instead, if it is missing. The Empties should be named exactly as described above. Usage After ensuring that a chair GameObject is set up correctly, the agent can be instructed to sit on it by creating a new AgentSittingTask. Its first parameter is the GameObject the agent should sit on, the second parameter is either SittingDirection.SITDOWN or SittingDirection.STANDUP, depending on whether the agent should sit down or stand up. Alternatively use SittingDirection.TOGGLE to toggle between sitting and standing, depending on the current state. AgentSittingTask sittingTask = new AgentSittingTask(Chair, SittingDirection.SITDOWN); AgentSittingTask standingTask = new AgentSittingTask(Chair, SittingDirection.STANDUP); taskSystem.ScheduleTask(sittingTask); taskSystem.Tasks.WaitForSeconds(3); taskSystem.ScheduleTask(standingTask); Example Scenes The framework contains an example scene that demonstrates the ability to sit on different chairs and stools. During execution of the scene, the agent will walk to a chair, sit down, stand up, and then walk to a stool to do the same."
  },
  "manual/task-bundle.html": {
    "href": "manual/task-bundle.html",
    "title": "TaskBundles | Documentation of the Virtual Agents Framework",
    "keywords": "TaskBundles TaskBundles are a way to group multiple sub-tasks together. The resulting task bundle can be added to a task system like any other task. A TaskBundle can also include a list of boolean preconditions. They are checked beforehand and determine if the TaskBundle prematurely finishes, in the event that one of the preconditions is not met. Tasks in a TaskBundle are executed back to back in sequence and cannot be interrupted by other tasks. Construct a TaskBundle The are three TaskBundle constructors, that can be used to create a TaskBundle: TaskBundle() TaskBundle(List<AgentBaseTask> tasks) TaskBundle(List<AgentBaseTask> tasks, List<Func <bool>> preconditions) tasks is a list of subtasks. Of note is, that TaskActions cannot be used here, as they would also add the sub-tasks to the regular scheduler. preconditions is a list of boolean functions, so in particular lambda expressions can be used. Other functions may be evaluated beforehand, so are not suitable for this purpose. The lambda functions must return a boolean value. () => {...} syntax is a lambda expression that defines an anonymous function inline. Parameters can be added in brackets on the left side of the arrow. You can add tasks and preconditions to the TaskBundle after its initialisation. This is possible through the AddTask, AddTasks and AddPrecondition methods. Note, that preconditions are checked before the TaskBundle execudes its tasks. If a precondition is added after the TaskBundle has started executing, it will not be checked. Example: public List<Transform> waypoints; List<AgentBaseTask> tasks = new List<AgentBaseTask>(); List<System.Func<bool>> preconditions = new List<System.Func<bool>>(); // In this example we add tasks via the constructor by passing a list for (int i = 0; i < waypoints.Count; i++) { tasks.Add(new AgentMovementTask(waypoints[i].position)); } TaskBundle myTaskBundle = new TaskBundle(tasks); // In this example we add a precondition after the initialisation myTaskBundle.AddPrecondition(() => { // This lambda function checks if the agent is close to the last waypoint // Compare vectors equality with accuracy of 0.5 float distance = Vector3.Distance(waypoints[waypoints.Count -1].position, agent.transform.position); return distance > 1.0f; }); Example Scene The framework contains one example scene that more comprehensively demonstrates the use of TaskBundles. In the TaskBundleSample the agent attempts to execute two TaskBundles, of which only one's preconditions are met. The TaskBundleController has the option to add multiple waypoints where the agent should walk. At the end of the execution of the first TaskBundle, the agent is close to the last waypoint, which leads to the precondition of the second bundle to fail."
  },
  "manual/task-system.html": {
    "href": "manual/task-system.html",
    "title": "Task System | Documentation of the Virtual Agents Framework",
    "keywords": "Task System A possible way to influence the agent's behavior is to assign tasks to the agent which the agent then works on. Tasks Tasks are the elements which tell the agent what to do. Structure All tasks need to implement the IAgentTask interface. It determines the necessary methods that a task must have like StartExecution(Agent) to start the task's execution or Tick(Agent) which is called every frame during the execution. Pre-Implemented Tasks The Virtual Agents Framework contains an ever-growing collection of pre-implemented tasks. These tasks are meant as a starting point for composing behaviors of agents. Currently, the following tasks exist and can already be used: AgentAnimationTask: Play animations on the agent AgentMovementTask: Let the agent walk to a given location or follow an object dynamically AgentWaitTask: Let the agent wait for a specific amount of time AgentRotationTask: Let the agent rotate to a specific angle, towards a specific object or towards coordinates AgentPickUpTask: Let the agent pickup an object next to them AgentDropTask: Let the agent drop an object or all objects that the agent is holding AgentAdaptiveGazeTask: Starts or stops the adaptive gaze feature. Adding Own Tasks In addition to the pre-implemented tasks, developers can also add own tasks that implement the IAgentTask interface. It is recommended to inherit from the AgentBaseTask class when creating new tasks. This base class already contains a lot of common logic for tasks, like marking a task as finished and then automatically invoking the event that is defined in the interface. If you have created a generic and configurable task that might be interesting to other developers, feel welcome to post a pull request on GitHub that contributes the task to the framework as a pre-implemented task. Task Scheduling Tasks are scheduled on agents using a priority queue. Each agent has a task manager which will evaluate the queue and start the execution of the next task. Scheduling a Task Instance on an Agent To assign a task to an agent, first create an instance of your task by calling its constructor. MyTask myTask = new MyTask(); Configure the task as required, e.g., by passing arguments to the constructor or by setting properties. After that, call ScheduleTask(IAgentTask, int, string) to schedule the task on a specific agent. Optionally, you can set the priority of the task. By default, it is set to 0, so negative values will be executed after all other tasks and positive values take priority over default tasks. The higher the number the earlier the task will be executed. Moreover, you can provide a layer argument to specify which animation layer the task affects. The agent is set up with different layers so that multiple actions can happen in parallel. By default, the \"Base Layer\" is chosen, so it affects the entire body of the agent. For more information on parallel layers see the documentation on parallel tasks. Shortcuts In order to keep the code brief and understandable, it is not always necessary to create the task instance object yourself and to schedule it on the agent explicitly. For common actions, it is also possible to call one of the shortcut functions on the agent. Currently, the following shortcut functions exist: GoTo GoTo(Vector3, int): Let the agent walk and turn to the specified coordinates. GoTo(Transform, Vector3, int): Let the agent walk and turn to the specified transform of an object in the scene. You can add an optional offset so that the agent does not run into the object but stops next to it. GoTo(GameObject, Vector3, int, bool): Let the agent walk and turn to the specified object in the scene. You can add an optional offset so that the agent does not run into the object but stops next to it. The agent can also follow an object dynamically, so that the agent will follow the object until it is reached. Partial incomplete paths will be allowed, when that option is enabled. WaitForSeconds: The agent waits for the given amount of seconds. PlayAnimation: Play an animation for the given time. Specify a start and stop trigger which will cause the animation to start and stop in the animator. If you add you own animations, set them up in a way that there are transitions in and out of your animation with the start and stop triggers set as conditions for entering the transition. Specifying a GameObject as an aimTarget for the animation, will start inverse kinematics (IK) on the specified layer. This can be used with NoAnimation as a start trigger to start the IK with no animation or with animations that benefit from the IK, for example the provided pointingLeft and pointingRight animation. PickUp: Pick up an item that is currently in reach of the agent, see items for more information GoToAndPickUp: Schedules an GoTo Task that makes the agent walk to the item before trying to pick it up DropItem: Drop the specified item if it is currently hold be the agent, if no item is specified, all items are dropped. GoToAndDropItem: Schedules an GoTo Task that makes the agent walk to the specified coordinates or transform before dropping the specified item or all items, if no item is specified. ActivateOrDeactivateAdaptiveGaze: Start or stops adaptive gazing until it is stopped or started again. This is realized with a task that only runs once. This also automatically adds a AdaptiveGaze component if the agent doesn't have one. StartAdaptiveGazeForTime: Schedule a task that starts adaptive gazing for the specified time and then deactivates it by scheduling a wait task between a start and stop task. PointAt: Point at the specified object with the left or right arm. If the object is behind the agent, the agent will turn around to point at it. Removing Tasks The following functions can be used to remove tasks from the agent: RemoveTask: Remove a task from the agent by specifying the task instance and its layer. Clear: Clear all tasks on a layer. You can specify the layer and whether the current task should be aborted. By default, the Base Layer is used and the current task is aborted. ClearAllLayers: Clear all tasks on all layers. You can specify whether the current task should be aborted. By default, the current task is aborted. Abort: Abort the current task on a layer. You can specify the layer. By default, the Base Layer is used. AbortAllLayers: Abort the current task on all layers."
  }
}