using i5.VirtualAgents.BehaviourTrees;
using i5.VirtualAgents.BehaviourTrees.Visual;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEngine;
using UnityEngine.UIElements;

namespace i5.VirtualAgents.Editor.BehaviourTrees
{
    /// <summary>
    /// Provides a visual Behaviour Tree Editor.
    /// </summary>
    public class BehaviourTreeEditor : EditorWindow
    {
        private BehaviourTreeView treeView;
        private InspectorView inspectorView;
        private Label treeViewOccludeLabel;
        private VisualElement occludeLabelParent;
        private Button saveButton;
        private Button layoutButton;

        [MenuItem("Virtual Agents Framework/Behaviour Tree Editor")]
        public static BehaviourTreeEditor ShowWindow()
        {
            BehaviourTreeEditor window = GetWindow<BehaviourTreeEditor>();
            window.titleContent = new GUIContent("Behaviour Tree Editor");
            // Set minimum window size, so that every part of the Editor can be seen
            window.minSize = new Vector2(600f, 400f);
            return window;
        }

        public void CreateGUI()
        {
            // Each editor window contains a root VisualElement object
            VisualElement root = rootVisualElement;

            // Import UXML. The UXML was generated by the Unity UIBuilder and contains which visual elements in which configuration comprise the BehaviourTreeEditor.
            var visualTree = AssetDatabase.LoadAssetAtPath<VisualTreeAsset>("Assets/Virtual Agents Framework/Editor/UI Builder/Behaviour Tree/BehaviourTreeEditor.uxml");
            visualTree.CloneTree(root);

            // A stylesheet can be added to a VisualElement.
            // The style will be applied to the VisualElement and all of its children.
            var styleSheet = AssetDatabase.LoadAssetAtPath<StyleSheet>("Assets/Virtual Agents Framework/Editor/UI Builder/Behaviour Tree/BehaviourTreeEditorStyleSheet.uss");
            root.styleSheets.Add(styleSheet);

            // Fetch and initialize objects from window
            treeView = root.Query<BehaviourTreeView>();
            treeView.SetupManipulators();
            inspectorView = root.Query<InspectorView>();
            treeView.OnNodeSelect = OnNodeSelectionChanged;
            treeViewOccludeLabel = root.Query<Label>("treeViewOccludeLabel");
            occludeLabelParent = treeViewOccludeLabel.parent;

            // Setup the save button
            saveButton = root.Query<Button>("Save");
            saveButton.clicked += SaveTree;

            // Setup the auto layout button
            layoutButton = root.Query<Button>("AutoLayout");
            layoutButton.clicked += AutoLayoutTree;

            // Forbid until a tree is selected
            ForbidTreeEditing();
        }

        // Changes the currently edited tree to the one selected in the unity project tab
        private void OnSelectionChange()
        {
            LoadSelectedTree();
        }

        private void LoadSelectedTree()
        {
            BehaviourTreeAsset tree = Selection.activeObject as BehaviourTreeAsset;
            // If the tree is not selected in the project window, check if the tree is attached to the selected game object
            if (!tree)
            {
                if (Selection.activeGameObject)
                {
                    if (Selection.activeGameObject.TryGetComponent<BehaviourTreeRunner>(out var runner))
                    {
                        if(runner.Tree == null)
                        {
                            return;
                        }
                        tree = runner.Tree;
                        Debug.Log("Tree selected from hierarchy window: " + tree.name);
                        AllowTreeEditing();
                        treeView.PopulateView(tree);

                        if (Selection.activeGameObject.GetComponent<Agent>())
                        {
                            treeView.CurrentlySelectedAgent = Selection.activeGameObject.GetComponent<Agent>();
                        }
                    }

                }
            }
            // If a tree is selected in the project window, populate the editor with the tree
            else
            {
                if (AssetDatabase.Contains(tree))
                {
                    AllowTreeEditing();
                    treeView.PopulateView(tree);
                }
                else
                {
                    // The asset is currently being created and named. Delay loading the tree until the tree is fully created.
                    ForbidTreeEditing();
                    tree.CreatedAndNamed += LoadSelectedTree;
                }
            }
        }

        [OnOpenAsset]
        // Handles opening the editor window when double-clicking BehaviourTreeAsset files
        public static bool OnOpenAsset(int instanceID, int line)
        {
            UnityEngine.Object obj = EditorUtility.InstanceIDToObject(instanceID);

            if (obj is BehaviourTreeAsset)
            {
                BehaviourTreeEditor window = ShowWindow();
                window.LoadSelectedTree();
                return true;
            }
            return false;

        }

        // Allows the user interact with the editor
        private void AllowTreeEditing()
        {
            treeViewOccludeLabel.RemoveFromHierarchy();
            treeView.SetEnabled(true);
            saveButton.SetEnabled(true);
            layoutButton.SetEnabled(true);
        }

        // Forbids the user to interact with the editor
        private void ForbidTreeEditing()
        {
            if (!occludeLabelParent.Contains(treeViewOccludeLabel))
            {
                occludeLabelParent.Insert(0, treeViewOccludeLabel);
            }
            treeView.SetEnabled(false);
            saveButton.SetEnabled(false);
            layoutButton.SetEnabled(false);
        }

        // Displays the inspector for the currently selected node
        private void OnNodeSelectionChanged(NodeView view)
        {
            inspectorView.UpdateSelection(view);
        }

        // Saves all changes made to the currently selected Behaviour Tree to the disc
        private void SaveTree()
        {
            EditorUtility.SetDirty(treeView.Tree);
            AssetDatabase.SaveAssets();
        }

        // Orders the tree in a way that the nodes are displayed in a more readable way
        private void AutoLayoutTree()
        {
            treeView.AutoLayoutTree();
        }

        private void OnInspectorUpdate()
        {
            treeView?.UpdateNodeStates();
        }
    }
}